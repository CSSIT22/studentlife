// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User Profile Module
model User_Profile {
  userId        String              @id @default(uuid())
  studentId     String
  fName         String
  lName         String
  email         String              @unique
  image         Bytes?
  details       Detail?
  student_major Int
  studentMajor  Major               @relation(fields: [student_major], references: [majorId])
  role          Role?
  userFollowers Follow[]            @relation("following")
  userFollowing Follow[]            @relation("follower")
  userReporters User_Report[]       @relation("reporting")
  userReporting User_Report[]       @relation("reporter")
  userBlockers  Block_Friend[]      @relation("blocking")
  userBlocking  Block_Friend[]      @relation("blocker")
  levels        EXP?
  posts         Student_Post[]
  relationScore Following_Rating[]
  reacted       Student_Reacted[]
  comment       Student_Comment[]
  pReported     Post_Report[]
  cReported     Comment_Report[]
  pHided        Hide_Post[]
  cHided        Hide_Comment[]
  notis         User_Noti_Object[]
  emailNotis    Noti_Setting_Email?
  appNotis      Noti_Setting_App?
  userTimetable Timetable[]
}

model Detail {
  userId  String       @unique
  birth   DateTime
  sex     String
  address String
  hobby   String
  phone   String
  year    Int
  student User_Profile @relation(fields: [userId], references: [userId])
}

model Major {
  majorId      Int         @id @default(autoincrement())
  majorName    String
  facultyId    Int
  student      User_Profile[]
  majorFaculty Faculty        @relation(fields: [facultyId], references: [facultyId])
}

model Faculty {
  facultyId   Int  @id @default(autoincrement())
  facultyName String
  major       Major[]
}

model Role {
  userId      String       @id
  club        String
  rank        String
  expire_date DateTime
  studentRole User_Profile @relation(fields: [userId], references: [userId])
}

model Follow {
  userId        String
  anotherUserId String
  status        Boolean
  date          DateTime     @default(now())
  follower      User_Profile @relation("follower", fields: [userId], references: [userId])
  following     User_Profile @relation("following", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model User_Report {
  userId        String
  anotherUserId String
  limit         Int
  reason        String
  date          DateTime     @default(now())
  reporter      User_Profile @relation("reporter", fields: [userId], references: [userId])
  reporting     User_Profile @relation("reporting", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Block_Friend {
  userId        String
  anotherUserId String
  status        Boolean
  blocker       User_Profile @relation("blocker", fields: [userId], references: [userId])
  blocking      User_Profile @relation("blocking", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model EXP {
  userId    String        @id
  currentXP Int           @default(0)
  level     Int           @default(1)
  student   User_Profile  @relation(fields: [userId], references: [userId])
  userXp    Action_to_XP?
}

model Action_to_XP {
  userId     String   @id
  actionType String
  actionXp   Int
  date       DateTime
  xpGain     EXP      @relation(fields: [userId], references: [userId])
}

//Timeline & Post Module
model Student_Post {
  postId          String            @id @default(cuid())
  userId          String
  lastEdit        DateTime          @default(now())
  score           Int
  seen            Boolean
  postOwner       User_Profile      @relation(fields: [userId], references: [userId])
  postBody        Post_Body?
  images          Image_Container[]
  vids            Video_Container[]
  studentsReacted Student_Reacted[]
  studentsComment Student_Comment[]
  rePost          Repost[]
  userReported    Post_Report[]
  postHided       Hide_Post[]
}

model Following_Rating {
  userId      String
  followingId String
  score       Int
  scoreGiver  User_Profile @relation(fields: [userId], references: [userId])

  @@id([userId, followingId])
}

model Post_Body {
  bodyId String @id @default(cuid())
  postId String       @unique
  text   String
  bodyOf Student_Post @relation(fields: [postId], references: [postId])
}

model Image_Container {
  imgId        String       @id @default(cuid())
  postId       String
  imageAddress String
  postImage    Student_Post @relation(fields: [postId], references: [postId])
}

model Video_Container {
  vidId      String       @id @default(cuid())
  postId     String
  vidAddress String
  postVid    Student_Post @relation(fields: [postId], references: [postId])
}

model Student_Reacted {
  reacter User_Profile @relation(fields: [userId], references: [userId])
  userId  String
  reactOn Student_Post @relation(fields: [postId], references: [postId])
  postId  String
  emoteId String
  emotes Emote_Collection @relation(fields: [emoteId], references: [emoteId])

  @@id([userId, postId])
}

model Emote_Collection {
  emoteId String @id @default(cuid())
  posts Student_Reacted[]
}

model Student_Comment {
  commentId       String           @id
  commenter       User_Profile     @relation(fields: [userId], references: [userId])
  userId          String
  commentOn       Student_Post     @relation(fields: [postId], references: [postId])
  postId          String
  comment         String
  cmTime          DateTime
  commentReported Comment_Report[]
  commentHided    Hide_Comment[]
}

model Repost {
  newPostId    String       @id
  postId       String
  newUserId    String
  newPostTime  DateTime     @default(now())
  originalPost Student_Post @relation(fields: [postId], references: [postId])
}

model Post_Report {
  reporter User_Profile @relation(fields: [userId], references: [userId])
  userId   String
  reported Student_Post @relation(fields: [postId], references: [postId])
  postId   String
  reason   String

  @@id([userId, postId])
}

model Comment_Report {
  reporter  User_Profile    @relation(fields: [userId], references: [userId])
  userId    String
  reported  Student_Comment @relation(fields: [commentId], references: [commentId])
  commentId String
  reason    String

  @@id([userId, commentId])
}

model Hide_Post {
  hider  User_Profile @relation(fields: [userId], references: [userId])
  userId String
  hided  Student_Post @relation(fields: [postId], references: [postId])
  postId String

  @@id([userId, postId])
}

model Hide_Comment {
  hider     User_Profile    @relation(fields: [userId], references: [userId])
  userId    String
  hided     Student_Comment @relation(fields: [commentId], references: [commentId])
  commentId String

  @@id([userId, commentId])
}

//Notification Module
model User_Noti_Object {
  notiObject   Noti_Object  @relation(fields: [notiObjectId], references: [notiObjectId])
  notiObjectId String
  user         User_Profile @relation(fields: [userId], references: [userId])
  userId       String

  @@id([notiObjectId, userId])
}

model Noti_Object {
  notiObjectId String             @id
  templateId   String
  date         DateTime
  isRead       Boolean
  moduleId     String
  url          String
  users        User_Noti_Object[]
  template     Template           @relation(fields: [templateId], references: [templateId])
  values       Value[]
  module       Module             @relation(fields: [moduleId], references: [moduleId])
}

model Template {
  templateId  String        @id
  template    String
  notiObjects Noti_Object[]
}

model Value {
  valueId      String      @id
  value        String
  notiObjectId String
  valueOf      Noti_Object @relation(fields: [notiObjectId], references: [notiObjectId])
}

model Module {
  moduleId   String        @id
  moduleName String
  notiObject Noti_Object[]
}

model Noti_Type {
  notiTypeId   String              @id
  notiType     String              @default("All")
  notiTypeName String
  notiTypeDesc String
  emailSetting Noti_Setting_Email?
  appSetting   Noti_Setting_App?
}

model Noti_Setting_Email {
  userId      String       @unique
  userSetting User_Profile @relation(fields: [userId], references: [userId])
  notiTypeId  String       @unique
  notiSetting Noti_Type    @relation(fields: [notiTypeId], references: [notiTypeId])
}

model Noti_Setting_App {
  userId      String       @unique
  userSetting User_Profile @relation(fields: [userId], references: [userId])
  notiTypeId  String       @unique
  notiSetting Noti_Type    @relation(fields: [notiTypeId], references: [notiTypeId])
}

//Schedule Module
model Timetable {
  tableId   String       @id @default(cuid())
  userId    String
  eventId   String
  tableUser User_Profile @relation(fields: [userId], references: [userId])
}

model Event {
  eventId String @id @default(cuid())
  eventName String
  placeId String
  stTime DateTime
  endTime DateTime
  eventTypeId String
  descId String @unique
  hostAt Event_Place @relation(fields: [placeId], references: [placeId])
  desc Description?
  alert Schedule_Alert?
}

model Event_Place {
  placeId String @id @default(cuid())
  building String
  room String
  events Event[]
}

model Description {
  descId String @id @default(cuid())
  desc String
  descOf Event @relation(fields: [descId], references: [descId])
}

model Event_Type {
  eventTypeId String @id @default(cuid())
  eventType String
}

model Course {
  courseId String @id @default(cuid())
  courseName String
  lecturer String
  assignments Assignment[]
}

model Assignment {
  assignmentId String @id @default(cuid())
  courseId String @default("0")
  assignmentName String
  assignmentOfCourse Course @relation(fields: [courseId], references: [courseId])
}

model Schedule_Alert {
  alertId String @id @default(cuid())
  eventId String @unique
  eventAlert Event @relation(fields: [eventId], references: [eventId])
}

//TodoList Module
