// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User Profile Module
model User_Profile {
  userId               String                           @id @default(uuid())
  studentId            String                           @unique @db.Char(11)
  fName                String
  lName                String
  email                String                           @unique
  image                Bytes?
  details              Detail?
  majorId              String?
  studentMajor         Major?                           @relation(fields: [majorId], references: [majorId], onDelete: SetNull)
  roles                User_To_Role[]
  userFollowers        Follow[]                         @relation("following")
  userFollowing        Follow[]                         @relation("follower")
  userReporters        User_Report[]                    @relation("reporting")
  userReporting        User_Report[]                    @relation("reporter")
  userBlockers         User_Blocked[]                   @relation("blocking")
  userBlocking         User_Blocked[]                   @relation("blocker")
  levels               EXP?
  posts                Student_Post[]
  reacted              Student_Reacted[]
  repost               Repost[]
  pComments            Post_Comment[]
  pReported            Post_Report[]
  cReported            Comment_Report[]
  pHided               Hide_Post[]
  cHided               Hide_Comment[]
  notis                Noti_User?
  userTimetable        Timetable[]
  tasks                Task[]
  groups               User_To_Group[]
  taskTracking         Task_Track?
  taskChecking         Task_Check[]
  taskEditing          Task_History?
  announcement         Announcement[]
  userAnnouncement     Post_On_Page[]
  userPinAnnouncement  Announcement_Pin[]
  userSeeAnnouncement  Announcement_Seen[]
  annApproved          Announcement_Approve[]
  userChat             User_To_Room[]
  userChatTo           Chat_Individual[]                @relation("chatting")
  userChatFrom         Chat_Individual[]                @relation("chatter")
  userSendMessage      Message[]
  userQuote            Chat_Quote[]
  userDating           Dating_Options?
  userQueue            Card_Queue[]                     @relation("User")
  frontUserQueue       Card_Queue[]                     @relation("Front User")
  backUserQueue        Card_Queue[]                     @relation("Back User")
  giveRate             User_Rating[]                    @relation("Receiver")
  receiveRate          User_Rating[]                    @relation("Giver")
  giveHeart            Heart_History[]                  @relation("HReceiver")
  receiveHeart         Heart_History[]                  @relation("HGiver")
  interests            User_Interest[]
  datingSetting        Dating_Enroll?
  createPoll           Activity_Poll[]
  polls                Poll_Applicant[]
  commuOwner           Community[]
  community            Community_User[]
  communityBlacklist   Community_Blacklist[]
  sendFile             File_Info[]
  files                User_Show_File[]
  fileHistory          File_History[]
  fComments            File_Comment[]
  accessTo             Direct_Access[]
  userBack             User_Back[]
  banInstances         Ban_Status[]
  wordReport           Word_Report[]
  shortNotes           Sn_Head[]
  voteTo               Sn_Votedetail[]
  snComments           Sn_Comment[]
  favSn                Sn_Fav[]
  recentSn             Sn_Recent[]
  accessSn             Sn_Access[]
  transactions         Transaction[]
  kmuttPoint           Kmutt_Point?
  coupons              User_Coupon[]
  carts                Shop_Cart[]
  reviewProduct        Shop_Product_Review[]
  likeRestaurants      Restaurant_Like_By_User[]
  favRestaurants       Restaurant_Favorite_By_User[]
  seenRestaurants      Restaurant_Seen_By_User[]
  shopReview           SReview_Shop_Review[]
  restaurantReview     SReview_Restaurant_Review[]
  shopReviewLike       SReview_Shop_Review_Like[]
  restaurantReviewLike SReview_Restaurant_Review_Like[]
  comment              SReview_Comment[]
  commentLike          SReview_Comment_Like[]
  suggestions          SReview_Suggestion[]
  questions            Question[]
  questionSetting      Question_Setting?
  questionComments     Question_Comment[]
  answers              Question_Answer[]
  answerComments       Question_Answer_Comment[]
  modvotes             Question_Modvote[]
  shortlinkQuota       ShortLink_Quota?
  shortlink            ShortLink[]
  shortlinkAccess      ShortLink_Permission_User[]
  report               Analytic_Report[]
  userAccess           Analytic_User_Access?
  genReportModule      Analytic_Report_Module[]
  userReport           Analytic_User_Report[]
}

model Detail {
  userId  String       @unique
  birth   DateTime     @db.Timestamp(0)
  sex     String
  address String
  hobby   String
  phone   String
  year    Int
  student User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Major {
  majorId         String                       @id @default(cuid())
  majorName       String
  facultyId       String?
  student         User_Profile[]
  majorFaculty    Faculty?                     @relation(fields: [facultyId], references: [facultyId], onDelete: SetNull)
  accessTo        Major_Access[]
  shortlinkAccess ShortLink_Permission_Major[]
}

model Faculty {
  facultyId       String                         @id @default(cuid())
  facultyName     String
  major           Major[]
  shortlinkAccess ShortLink_Permission_Faculty[]
}

model Role {
  roleId   String         @id @default(cuid())
  roleName Role_Type
  expired  DateTime       @db.Timestamp(0)
  users    User_To_Role[]
}

enum Role_Type {
  ANNOUNCEMENT_APPROVER
  ANNOUNCEMENT_ANNOUNCER
  SCHEDULE_CREATER
}

model User_To_Role {
  userId String
  user   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  roleId String
  role   Role         @relation(fields: [roleId], references: [roleId], onDelete: Cascade)

  @@id([userId, roleId])
}

model Follow {
  userId        String
  anotherUserId String
  date          DateTime     @default(now()) @db.Timestamp(0)
  score         Int
  follower      User_Profile @relation("follower", fields: [userId], references: [userId], onDelete: Cascade)
  following     User_Profile @relation("following", fields: [anotherUserId], references: [userId], onDelete: Cascade)

  @@id([userId, anotherUserId])
}

model User_Report {
  userId        String
  anotherUserId String
  reason        String
  date          DateTime     @default(now()) @db.Timestamp(0)
  reporter      User_Profile @relation("reporter", fields: [userId], references: [userId])
  reporting     User_Profile @relation("reporting", fields: [anotherUserId], references: [userId], onDelete: Cascade)

  @@id([userId, anotherUserId])
}

model User_Blocked {
  userId        String
  anotherUserId String
  date          DateTime     @default(now()) @db.Timestamp(0)
  blocker       User_Profile @relation("blocker", fields: [userId], references: [userId])
  blocking      User_Profile @relation("blocking", fields: [anotherUserId], references: [userId], onDelete: Cascade)

  @@id([userId, anotherUserId])
}

model EXP {
  userId    String         @id
  currentXP Int            @default(0)
  level     Int            @default(1)
  student   User_Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userXp    Action_to_XP[]
}

model Action_to_XP {
  actionId   String   @id @default(cuid())
  userId     String
  actionType String
  actionXp   Int
  date       DateTime @db.Timestamp(0)
  xpGain     EXP      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

//Timeline & Post Module
model Student_Post {
  postId          String            @id @default(cuid())
  userId          String
  lastEdit        DateTime          @default(now()) @db.Timestamp(0)
  score           Int
  seen            Boolean
  postOwner       User_Profile      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  postBody        Post_Body?
  images          Image_Container[]
  vids            Video_Container[]
  studentsReacted Student_Reacted[]
  studentsComment Post_Comment[]
  rePost          Repost[]
  userReported    Post_Report[]
  postHided       Hide_Post[]
  communityPost   Community_Post?
}

model Post_Body {
  postId String       @id
  text   String       @db.Char(1000)
  bodyOf Student_Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Image_Container {
  imgId        String       @id @default(cuid())
  postId       String
  imageAddress String
  postImage    Student_Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Video_Container {
  vidId      String       @id @default(cuid())
  postId     String
  vidAddress String
  postVid    Student_Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Student_Reacted {
  reacter User_Profile     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId  String
  reactOn Student_Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId  String
  emoteId String
  emotes  Emote_Collection @relation(fields: [emoteId], references: [emoteId], onDelete: Cascade)

  @@id([userId, postId])
}

model Emote_Collection {
  emoteId   String            @id @default(cuid())
  emoteName String
  emote     String
  posts     Student_Reacted[]
}

model Post_Comment {
  commentId       String           @id @default(cuid())
  commenter       User_Profile     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId          String
  commentOn       Student_Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId          String
  comment         String           @db.Char(100)
  cmTime          DateTime         @db.Timestamp(0)
  commentReported Comment_Report[]
  commentHided    Hide_Comment[]
}

model Repost {
  newPostId    String       @id
  postId       String
  newUserId    String
  newPostTime  DateTime     @default(now()) @db.Timestamp(0)
  originalPost Student_Post @relation(fields: [postId], references: [postId])
  shareUser    User_Profile @relation(fields: [newPostId], references: [userId], onDelete: Cascade)
}

model Post_Report {
  reporter User_Profile @relation(fields: [userId], references: [userId])
  userId   String
  reported Student_Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId   String
  reason   String       @db.Char(1000)

  @@id([userId, postId])
}

model Comment_Report {
  reporter  User_Profile @relation(fields: [userId], references: [userId])
  userId    String
  reported  Post_Comment @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  commentId String
  reason    String       @db.Char(1000)

  @@id([userId, commentId])
}

model Hide_Post {
  hider  User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String
  hided  Student_Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model Hide_Comment {
  hider     User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  hided     Post_Comment @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}

//Notification Module
model Noti_User {
  userId           String             @id
  user             User_Profile       @relation(fields: [userId], references: [userId])
  notiSettingEmail Noti_Type          @default(ALL)
  notiSettingApp   Noti_Type          @default(ALL)
  notiObjects      User_Noti_Object[]
}

model User_Noti_Object {
  notiObject   Noti_Object @relation(fields: [notiObjectId], references: [notiObjectId], onDelete: Cascade)
  notiObjectId String
  user         Noti_User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String

  @@id([notiObjectId, userId])
}

model Noti_Object {
  notiObjectId String             @id @default(cuid())
  template     Template
  date         DateTime           @db.Timestamp(0)
  isRead       Boolean
  module       Module
  url          String
  users        User_Noti_Object[]
  values       Value[]
}

enum Template {
  ANNOUNCEMENT_APPROVED
  ANNOUNCEMENT_NEW
  ANNOUNCEMENT_WAIT_FOR_APPROVE
  CHAT_MESSAGE
  COMMUNITY_INVITE
  COMMUNITY_POST
  DATING_ACCEPTED
  DATING_INTERESTED
  DATING_MATCH
  DATING_MATCH_FRIEND
  QnA_ANSWER
  QnA_ANSWER_ANONYMOUS
  SCHEDULE_EVENT
  SHOP_REVIEW_COMMENT
  TODO_LIST_TASK
  TRANSACTION_SUCCESS
  TRANSACTION_TRANSFER
}

model Value {
  valueId      String      @id @default(cuid())
  value        String
  notiObjectId String
  valueOf      Noti_Object @relation(fields: [notiObjectId], references: [notiObjectId], onDelete: Cascade)
}

enum Module {
  ANNOUNCEMENT
  CHAT
  COMMUNITY
  DATING
  QnA
  SCHEDULE
  SHOP_REVIEW
  TODO_LIST
  TRANSACTION
}

enum Noti_Type {
  ALL
  MENTION
  IGNORE
}

//Schedule Module
model Timetable {
  tableId   String       @id @default(cuid())
  userId    String
  eventId   String
  tableUser User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Event {
  eventId      String       @id @default(cuid())
  eventName    String
  placeId      String?
  stTime       DateTime     @db.Timestamp(0)
  endTime      DateTime     @db.Timestamp(0)
  eventTypeId  String
  descId       String       @unique
  hostAt       Event_Place? @relation(fields: [placeId], references: [placeId])
  desc         String
  courseId     String?
  course       Course?      @relation(fields: [courseId], references: [courseId])
  assignmentId String?
  assignment   Assignment?  @relation(fields: [assignmentId], references: [assignmentId])
  // alert Schedule_Alert?
}

model Event_Place {
  placeId  String  @id @default(cuid())
  building String
  room     String
  events   Event[]
}

model Event_Type {
  eventTypeId String @id @default(cuid())
  eventType   String
}

model Course {
  courseId    String       @id @default(cuid())
  courseName  String
  lecturer    String
  assignments Assignment[]
  shortNotes  Sn_Head[]
  event       Event[]
}

model Assignment {
  assignmentId       String  @id @default(cuid())
  courseId           String  @default("0")
  assignmentName     String
  assignmentOfCourse Course  @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  event              Event[]
}

// model Schedule_Alert {
//   alertId String @id @default(cuid())
//   eventId String @unique
//   eventAlert Event @relation(fields: [eventId], references: [eventId])
// }

//TodoList Module
model Task {
  taskId     String         @id @default(cuid())
  userId     String
  taskName   String
  taskDesc   String
  created    DateTime       @default(now()) @db.Timestamp(0)
  due        DateTime       @db.Timestamp(0)
  taskType   String
  folderId   String
  groupId    String
  taskOfUser User_Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  inFolder   Task_Folder    @relation(fields: [folderId], references: [folderId], onDelete: Cascade)
  inGroup    Task_Group     @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  checkTask  Task_Check?
  edits      Task_History[]
}

model Task_Folder {
  folderId   String @id @default(cuid())
  folderName String
  tasks      Task[]
}

model Task_Group {
  groupId   String          @id @default(cuid())
  groupName String
  groups    Task[]
  users     User_To_Group[]
}

model User_To_Group {
  user    User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId  String
  group   Task_Group   @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  groupId String

  @@id([userId, groupId])
}

model Task_Track {
  userId     String       @id
  percentage Decimal      @db.Decimal(5, 2)
  userTask   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Task_Check {
  taskId    String       @unique
  userId    String
  isCheck   Boolean      @default(false)
  taskCheck Task         @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  userCheck User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([taskId, userId])
}

model Task_History {
  taskId   String
  userId   String       @unique
  date     DateTime     @db.Timestamp(0)
  editTask Task         @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  editor   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([taskId, userId])
}

//Announcement Module
model Announcement {
  postId      String                @id @default(cuid())
  userId      String
  filterId    Int
  annCreated  DateTime              @default(now()) @db.Timestamp(0)
  annExpired  DateTime              @db.Date
  isApprove   Boolean               @default(false)
  annCreator  User_Profile          @relation(fields: [userId], references: [userId])
  annLanguage Post_To_Language[]
  annFilter Announcement_Filter @relation(fields: [filterId], references: [filterId])
  annPost     Announcement_Post?
  annPin      Announcement_Pin[]
  annSee      Announcement_Seen[]
  annApprove  Announcement_Approve?
  annDel      Announcement_Delete?
}

model Announcement_Filter {
  filterId   Int    @id @default(autoincrement())
  filterType String
  value      String
  announcement Announcement[]
}

model Announcement_Language {
  languageId       Int                @id @default(autoincrement())
  language         String
  announcementPost Post_To_Language[]
}

model Post_To_Language {
  post       Announcement          @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId     String
  language   Announcement_Language @relation(fields: [languageId], references: [languageId], onDelete: Cascade)
  languageId Int
  annTopic   String
  annDetail  String

  @@id([postId, languageId])
}

model Announcement_Post {
  postId       String         @id
  status       String         @default("Waiting for Approve")
  announcement Announcement   @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postTo       Post_On_Page[]
}

model Post_On_Page {
  postId String
  userId String
  post   Announcement_Post @relation(fields: [postId], references: [postId])
  user   User_Profile      @relation(fields: [userId], references: [userId])

  @@id([postId, userId])
}

model Announcement_Delete {
  postId   String       @id
  deleteAt DateTime     @default(now()) @db.Timestamp(0)
  post     Announcement @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Announcement_Pin {
  post   Announcement @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId String
  user   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String
  status Boolean      @default(false)

  @@id([postId, userId])
}

model Announcement_Seen {
  post   Announcement @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId String
  user   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String
  seenAt DateTime     @default(now()) @db.Timestamp(0)

  @@id([postId, userId])
}

model Announcement_Approve {
  userId      String
  postId      String       @unique
  approveTime DateTime     @default(now()) @db.Timestamp(0)
  approvedBy  User_Profile @relation(fields: [userId], references: [userId])
  postApprove Announcement @relation(fields: [postId], references: [postId], onDelete: Cascade)

  @@id([userId, postId])
}

//Chat Module
model Chat_Room {
  roomId         String               @id @default(cuid())
  roomName       String
  chatColor      String               @db.Char(7)
  created        DateTime             @default(now()) @db.Timestamp(0)
  roomType       Room_Type
  roomIndividual Chat_Individual?
  roomGroup      Chat_Group?
  poll           Activity_Poll?
  haveUser       User_To_Room[]
  messages       Message[]
  quotes         Chat_Quote[]
  wordReport     Word_Report_Detail[]
}

model User_To_Room {
  user     User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId   String
  room     Chat_Room    @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  roomId   String
  joined   DateTime  @default(now()) @db.Timestamp(0)
  lefted   DateTime  @default(dbgenerated("make_timestamp(3000, 1, 1, 0, 0, 0)")) @db.Timestamp(0)

  @@id([userId, roomId])
}

model Chat_Individual {
  roomId        String       @unique
  userId        String
  anotherUserId String
  room          Chat_Room    @relation(fields: [roomId], references: [roomId])
  user          User_Profile @relation("chatter", fields: [userId], references: [userId])
  chatWith      User_Profile @relation("chatting", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Chat_Group {
  roomId   String    @unique
  groupImg String
  room     Chat_Room @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
}

model Message {
  messageId     String        @id @default(cuid())
  roomId        String
  senderId      String?
  messageType   Message_Type
  created       DateTime      @default(now()) @db.Timestamp(0)
  isRead        Boolean       @default(false)
  messageInRoom Chat_Room     @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  messageSender User_Profile? @relation(fields: [senderId], references: [userId], onDelete: SetNull)
}

model Chat_Quote {
  quoteId  Int          @id @default(autoincrement())
  roomId   String
  userId   String
  created  DateTime     @default(now()) @db.Timestamp(0)
  text     String
  quoteFor Chat_Room    @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  quoter   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Chat_Sticker {
  stickerId   Int    @id @default(autoincrement())
  stickerName String
  stickerLink String
}

model Chat_Restaurant {
  rKey           Int    @id @default(autoincrement())
  restaurantId   String
  restaurantName String
}

model Chat_Transaction {
  tKey        Int         @id @default(autoincrement())
  transId     String      @unique
  payerId     String
  receiverId  String
  qrGen       String
  transaction Transaction @relation(fields: [transId], references: [transId], onDelete: Cascade)
}

enum Room_Type {
  INDIVIDUAL
  GROUP
}

enum Message_Type {
  TEXT
  QUOTE
  STICKER
  RESTAURANT
  TRANSACTION
}

//Dating Module
model Dating_Options {
  userId     String         @unique
  ageMin     Int
  ageMax     Int
  genderPref String
  useAge     Boolean
  user       User_Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  faculties  Faculty_Pref[]
}

model Faculty_Pref {
  userId      String
  facultyPref String
  user        Dating_Options @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, facultyPref])
}

model Card_Queue {
  userId      String        @id
  frontUserId String?
  backUserId  String?
  user        User_Profile  @relation("User", fields: [userId], references: [userId], onDelete: Cascade)
  frontUser   User_Profile? @relation("Front User", fields: [frontUserId], references: [userId])
  backUser    User_Profile? @relation("Back User", fields: [backUserId], references: [userId])
}

model User_Rating {
  userId        String
  anotherUserId String
  score         Int
  scoreGiver    User_Profile @relation("Giver", fields: [userId], references: [userId], onDelete: Cascade)
  scoreReceiver User_Profile @relation("Receiver", fields: [anotherUserId], references: [userId], onDelete: Cascade)

  @@id([userId, anotherUserId])
}

model Heart_History {
  userId        String
  anotherUserId String
  heartedAt     DateTime     @default(now()) @db.Timestamp(0)
  isSkipped     Boolean
  heartGiver    User_Profile @relation("HGiver", fields: [userId], references: [userId], onDelete: Cascade)
  heartReceiver User_Profile @relation("HReceiver", fields: [anotherUserId], references: [userId], onDelete: Cascade)

  @@id([userId, anotherUserId])
}

model Interest {
  interestId   Int             @id @default(autoincrement())
  interestName String
  users        User_Interest[]
  polls        Poll_Interest[]
}

model User_Interest {
  user       User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId     String
  interest   Interest     @relation(fields: [interestId], references: [interestId], onDelete: Cascade)
  interestId Int

  @@id([userId, interestId])
}

model Dating_Enroll {
  userId              String       @unique
  hasCompleteTutorial Boolean
  hasCompleteSetting  Boolean
  userDating          User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Activity_Poll {
  pollId         String           @id @default(cuid())
  userId         String?
  pollName       String
  pollPlace      String
  pollAppointAt  DateTime         @db.Timestamp(0)
  pollText       String
  participantMin Int
  participantMax Int
  isOpen         Boolean
  pollcreated    DateTime         @default(now()) @db.Timestamp(0)
  roomId         String           @unique
  pollCreator    User_Profile?    @relation(fields: [userId], references: [userId])
  pollIn         Chat_Room        @relation(fields: [roomId], references: [roomId])
  participants   Poll_Applicant[]
  interests      Poll_Interest[]
}

model Poll_Applicant {
  user         User_Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId       String
  poll         Activity_Poll @relation(fields: [pollId], references: [pollId], onDelete: Cascade)
  pollId       String
  isAccepted   Boolean
  registerTime DateTime      @db.Timestamp(0)

  @@id([userId, pollId])
}

model Poll_Interest {
  pollId             String
  activityInterestId Int
  pollInterest       Activity_Poll @relation(fields: [pollId], references: [pollId], onDelete: Cascade)
  interest           Interest      @relation(fields: [activityInterestId], references: [interestId], onDelete: Cascade)

  @@id([pollId, activityInterestId])
}

//Community
model Community {
  communityId      String                @id @default(cuid())
  communityName    String
  communityOwnerId String?
  communityDesc    String
  communityPrivacy Boolean
  communityPhoto   Bytes?
  member           Community_User[]
  owner            User_Profile?         @relation(fields: [communityOwnerId], references: [userId])
  blacklist        Community_Blacklist[]
  tags             Community_Tag[]
  posts            Community_Post[]
  files            Community_File[]
  accessTo         Community_Access[]
}

model Community_User {
  user        User_Profile   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      String
  community   Community      @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
  communityId String
  role        Community_Role @relation(fields: [roleId], references: [roleId], onDelete: SetDefault)
  roleId      String         @unique
  joined      DateTime       @db.Timestamp(0)
  status      Boolean        @default(false)

  @@id([userId, communityId])
}

model Community_Role {
  roleId   String          @id @default(cuid())
  roleName CRole_Type      @default(MEMBER)
  roleOf   Community_User?
}

enum CRole_Type {
  ADMIN
  CO_ADMIN
  MEMBER
}

model Community_Blacklist {
  user        User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      String
  community   Community    @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
  communityId String
  since       DateTime     @default(now()) @db.Timestamp(0)

  @@id([userId, communityId])
}

model Community_Tag {
  community   Community @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
  communityId String
  tag         Tag       @relation(fields: [tagId], references: [tagId], onDelete: Cascade)
  tagId       Int

  @@id([communityId, tagId])
}

model Tag {
  tagId        Int             @id @default(autoincrement())
  tagName      String          @db.Char(25)
  tagDesc      String
  communityTag Community_Tag[]
}

model Community_Post {
  post        Student_Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId      String       @unique
  community   Community    @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
  communityId String
  isPinned    Boolean      @default(false)
}

model Community_File {
  file        File_Info @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  fileId      String    @unique
  community   Community @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
  communityId String
}

//Airdrop Module
model File_Info {
  fileId      String           @id @default(cuid())
  fileName    String
  fileSender  String
  sendType    String
  fileDesc    String
  fileExpired DateTime         @db.Timestamp(0)
  sender      User_Profile     @relation(fields: [fileSender], references: [userId], onDelete: Cascade)
  users       User_Show_File[]
  community   Community_File?
  comments    File_Comment[]
  folders     File_In_Folder[]
  history     File_History[]
}

model User_Show_File {
  user   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId String
  file   File_Info    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  fileId String

  @@id([userId, fileId])
}

model File_Comment {
  commentId   String       @id @default(cuid())
  fileId      String
  userId      String
  commentText String
  commentedAt DateTime     @default(now()) @db.Timestamp(0)
  commentOn   File_Info    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  commentor   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Folder {
  folderId   String       @id @default(cuid())
  folderName String
  subFolder  Sub_Folder[]
}

model Sub_Folder {
  sFolderId    String           @id @default(cuid())
  sFolderName  String
  folderId     String
  parentFolder Folder           @relation(fields: [folderId], references: [folderId], onDelete: Cascade)
  files        File_In_Folder[]
}

model File_In_Folder {
  file      File_Info  @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  fileId    String
  folder    Sub_Folder @relation(fields: [sFolderId], references: [sFolderId], onDelete: Cascade)
  sFolderId String

  @@id([fileId, sFolderId])
}

model File_Access {
  accessId   String             @id @default(cuid())
  fileId     String
  accessType Access_Type
  everyone   Everyone_Access[]
  community  Community_Access[]
  major      Major_Access[]
  direct     Direct_Access[]
}

enum Access_Type {
  EVERYONE
  COMMUNITY
  MAJOR
  DIRECT
}

model File_History {
  fileId      String
  userId      String
  historyType History_Type
  createdAt   DateTime     @default(now()) @db.Timestamp(0)

  file File_Info    @relation(fields: [fileId], references: [fileId], onDelete: Cascade)
  user User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([fileId, userId])
}

enum History_Type {
  UPLOAD
  DOWNLOAD
}

model Everyone_Access {
  eaId           String      @id @default(cuid())
  accessId       String
  eaFileAccessId File_Access @relation(fields: [accessId], references: [accessId], onDelete: Cascade)
}

model Community_Access {
  caId          String      @id @default(cuid())
  accessId      String
  communityId   String
  cFileAccessId File_Access @relation(fields: [accessId], references: [accessId], onDelete: Cascade)
  haveAccess    Community   @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
}

model Major_Access {
  maId          String      @id @default(cuid())
  accessId      String
  majorId       String
  mFileAccessId File_Access @relation(fields: [accessId], references: [accessId], onDelete: Cascade)
  haveAccess    Major       @relation(fields: [majorId], references: [majorId], onDelete: Cascade)
}

model Direct_Access {
  daId          String       @id @default(cuid())
  accessId      String
  userId        String
  dFileAccessId File_Access  @relation(fields: [accessId], references: [accessId], onDelete: Cascade)
  haveAccess    User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

//Backend Module
model User_Back {
  userId        String
  token         String
  loginSession  Login_Info?
  logoutSession Logout_Info?
  user          User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, token])
}

model Login_Info {
  loginId String        @id @default(cuid())
  userId  String
  token   String
  login   User_Back     @relation(fields: [userId, token], references: [userId, token])
  detail  Login_Detail?

  @@unique([userId, token])
}

model Login_Detail {
  loginId      String     @id
  loginDate    DateTime   @default(now()) @db.Timestamp(0)
  tokenExpired DateTime   @db.Timestamp(0)
  deviceInfo   String
  ip           String
  detailOf     Login_Info @relation(fields: [loginId], references: [loginId], onDelete: Cascade)
}

model Logout_Info {
  logoutId String         @id @default(cuid())
  userId   String
  token    String
  logout   User_Back      @relation(fields: [userId, token], references: [userId, token])
  detail   Logout_Detail?

  @@unique([userId, token])
}

model Logout_Detail {
  logoutId   String      @id
  logoutDate DateTime    @default(now()) @db.Timestamp(0)
  deviceInfo String
  ip         String
  detailOf   Logout_Info @relation(fields: [logoutId], references: [logoutId], onDelete: Cascade)
}

model Ban_Status {
  banId    String       @id @default(cuid())
  userId   String
  reason   String
  instance Int
  banFrom  DateTime     @default(now()) @db.Timestamp(0)
  banTo    DateTime     @db.Timestamp(0)
  user     User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Word_Report {
  wordReportId Int                 @id @default(autoincrement())
  word         String
  userId       String
  reporter     User_Profile        @relation(fields: [userId], references: [userId])
  detail       Word_Report_Detail?
  reportedWord Filtered_Word       @relation(fields: [wordReportId], references: [wordReportId])
}

model Word_Report_Detail {
  wordReportDetailId Int         @id
  roomId             String
  reason             String
  reportedAt         DateTime    @default(now()) @db.Timestamp(0)
  detailOf           Word_Report @relation(fields: [wordReportDetailId], references: [wordReportId], onDelete: Cascade)
  reportFrom         Chat_Room   @relation(fields: [roomId], references: [roomId])
}

model Filtered_Word {
  wordReportId Int           @id
  word         String
  wordReport   Word_Report[]
}

//ShortNotes Module
model Sn_Head {
  snId       String          @id @default(cuid())
  courseId   String
  created    DateTime        @default(now()) @db.Timestamp(0)
  userId     String
  isPublic   Boolean
  snName     String
  snDesc     String
  snLink     String
  votes      Int             @default(0)
  course     Course          @relation(fields: [courseId], references: [courseId])
  owner      User_Profile    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  voteDetail Sn_Votedetail[]
  comments   Sn_Comment[]
  userFav    Sn_Fav[]
  userRecent Sn_Recent[]
  userAccess Sn_Access[]
  inTheseLib Sn_In_Library[]
}

model Sn_Votedetail {
  voteId   Int          @id @default(autoincrement())
  snId     String
  userId   String
  voteType Vote_Type
  votedBy  User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  voteTo   Sn_Head      @relation(fields: [snId], references: [snId], onDelete: Cascade)

  @@unique([snId, userId])
}

enum Vote_Type {
  UPVOTE
  DOWNVOTE
}

model Sn_Comment {
  commentId   String       @id @default(cuid())
  snId        String
  userId      String
  comment     String
  commentedAt DateTime     @default(now()) @db.Timestamp(0)
  commentOn   Sn_Head      @relation(fields: [snId], references: [snId], onDelete: Cascade)
  commentor   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Sn_Fav {
  shortNote Sn_Head      @relation(fields: [snId], references: [snId], onDelete: Cascade)
  snId      String
  favBy     User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String

  @@id([snId, userId])
}

model Sn_Recent {
  snId         String
  userId       String
  viewedAt     DateTime     @default(now()) @db.Timestamp(0)
  shortNote    Sn_Head      @relation(fields: [snId], references: [snId], onDelete: Cascade)
  recentViewBy User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([snId, userId])
}

model Sn_Access {
  snId      String
  userId    String
  shortNote Sn_Head      @relation(fields: [snId], references: [snId], onDelete: Cascade)
  accessBy  User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([snId, userId])
}

model Sn_Library {
  libId      Int             @id @default(autoincrement())
  libName    String
  userId     String
  shortNotes Sn_In_Library[]

  @@unique([libName, userId])
}

model Sn_In_Library {
  libId Int
  snId  String
  lib   Sn_Library @relation(fields: [libId], references: [libId], onDelete: Cascade)
  sn    Sn_Head    @relation(fields: [snId], references: [snId], onDelete: Cascade)

  @@id([libId, snId])
}

//Transaction Module
model Transaction {
  transId         String               @id @default(cuid())
  userId          String
  payMethodId     Int
  subTotalPrice   Decimal              @db.Decimal(9, 2)
  pointUse        Int
  totalPrice      Decimal              @db.Decimal(9, 2)
  payer           User_Profile         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  detail          Transaction_Detail?
  type            Transaction_Paytype?
  pointAccumulate Kmutt_Point_History?
  moneyChat       Chat_Transaction?
  moneyShop       Shop_Order?
}

model Transaction_Detail {
  transId      String            @id
  transDesc    String
  transCreated DateTime          @default(now()) @db.Timestamp(0)
  transStatus  String
  isShip       Boolean
  errKey       Int               @unique @default(autoincrement())
  errId        Int               @default(0)
  detailOf     Transaction       @relation(fields: [transId], references: [transId], onDelete: Cascade)
  haveError    Transaction_Error @relation(fields: [errKey], references: [errKey], onDelete: Cascade)
}

model Transaction_Error {
  errKey  Int                 @id @default(autoincrement())
  errId   Int
  errDesc String
  error   Transaction_Detail?
}

model Transaction_Paymethod {
  payMethodId Int          @id
  tokenId     String       @unique
  ccMethod    Credit_Card?
  ebMethod    E_Banking?
  qrMethod    QR?
}

model Credit_Card {
  tokenId     String                @id @default(cuid())
  ccId        String
  holderName  String
  country     String
  bank        String
  cvc         String
  last4       String                @db.Char(4)
  cardExpired DateTime              @db.Date
  payMethod   Transaction_Paymethod @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)
}

model E_Banking {
  tokenId    String                @id @default(cuid())
  bkId       String
  holderName String
  holderType String
  bank       String
  country    String
  currency   String
  payMethod  Transaction_Paymethod @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)
}

model QR {
  tokenId    String                @id @default(cuid())
  qrSourceId String
  qr         String
  expired    DateTime              @default(dbgenerated("make_timestamp(3000, 1, 1, 0, 0, 0)")) @db.Timestamp(0)
  payMethod  Transaction_Paymethod @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)
}

model Transaction_Paytype {
  transId     String       @id
  typeOfTrans Payment_Type
  transType   Transaction  @relation(fields: [transId], references: [transId], onDelete: Cascade)
}

enum Payment_Type {
  SHOP
  MESSAGE
}

model Kmutt_Point {
  kpId            String                @id @default(cuid())
  userId          String                @unique
  point           Decimal               @db.Decimal(8, 2)
  userPoint       User_Profile          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  pointAccumulate Kmutt_Point_History[]
}

model Kmutt_Point_History {
  transId            String      @id
  kpId               String
  // userId String
  pointsReceived     Decimal     @default(0) @db.Decimal(8, 2)
  pointsSpent        Decimal     @default(0) @db.Decimal(8, 2)
  pointTransactionAt DateTime    @default(now()) @db.Timestamp(0)
  pointHistoryFrom   Transaction @relation(fields: [transId], references: [transId])
  pointHistoryOf     Kmutt_Point @relation(fields: [kpId], references: [kpId], onDelete: Cascade)
}

//Shop Module
model Shop_Order {
  orderId           String               @id @default(cuid())
  userId            String
  transId           String               @unique
  couponCode        String?              @unique
  totalPrice        Decimal              @db.Decimal(9, 2)
  totalDeliveryFees Decimal              @db.Decimal(9, 2)
  shipping          String
  orderPlaced       DateTime             @default(now()) @db.Timestamp(0)
  orderStatus       String
  transaction       Transaction          @relation(fields: [transId], references: [transId], onDelete: Restrict)
  useCoupon         User_Coupon?         @relation(fields: [couponCode], references: [couponCode], onDelete: SetNull)
  products          Shop_Order_Product[]
}

model Shop_Coupon {
  couponCode   String        @id
  couponDesc   String
  discount     Decimal       @db.Decimal(9, 2)
  validFrom    DateTime      @db.Timestamp(0)
  validTill    DateTime      @db.Timestamp(0)
  minimumSpend Decimal       @db.Decimal(9, 2)
  productId    Int?
  quota        Int
  userCoupon   User_Coupon[]
  product      Shop_Product? @relation(fields: [productId], references: [productId], onDelete: SetNull)
}

model User_Coupon {
  userId     String
  couponCode String       @unique
  user       User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  coupon     Shop_Coupon  @relation(fields: [couponCode], references: [couponCode], onDelete: Cascade)
  useCoupon  Shop_Order?

  @@id([userId, couponCode])
}

model Shop_Product {
  productId    Int                   @id @default(autoincrement())
  categoryId   Int?
  contactId    Int
  productName  String
  productDesc  String
  productColor String
  productSize  String
  productPrice Decimal               @db.Decimal(9, 2)
  productStock Int
  brandName    String
  deliveryFees Decimal               @db.Decimal(9, 2)
  views        BigInt
  images       Shop_Product_Images[]
  inCategory   Shop_Categories?      @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)
  contactTo    Shop_Contact          @relation(fields: [contactId], references: [contactId], onDelete: Cascade)
  orders       Shop_Order_Product[]
  carts        Shop_Cart[]
  userReview   Shop_Product_Review[]
  coupons      Shop_Coupon[]
}

model Shop_Categories {
  categoryId   Int            @id
  categoryName String
  image        String
  products     Shop_Product[]
}

model Shop_Contact {
  contactId     Int            @id
  contactPerson String
  phoneNo       String
  address       String
  lineId        String
  products      Shop_Product[]
}

model Shop_Product_Images {
  piId      Int          @id @default(autoincrement())
  productId Int
  image     String
  imageOf   Shop_Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Shop_Order_Product {
  orderId   String
  order     Shop_Order   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  productId Int
  product   Shop_Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  quantity  Int

  @@id([orderId, productId])
}

model Shop_Cart {
  userId    String
  user      User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  productId Int
  product   Shop_Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  quantity  Int

  @@id([userId, productId])
}

model Shop_Product_Review {
  reviewId     Int          @id
  userId       String
  user         User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  productId    Int
  product      Shop_Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  reviewName   String
  reviewDesc   String
  reviewRating Int
  reviewAt     DateTime     @default(now()) @db.Timestamp(0)
  image        String
}

//Restaurant Module
model Restaurant {
  resId       String                        @id @default(cuid())
  resName     String
  lastupdated DateTime                      @default(now()) @db.Timestamp(0)
  likes       Int
  isSeen      Boolean
  detail      Restaurant_Detail?
  images      Restaurant_Image[]
  openAt      Restaurant_Open[]
  closeAt     Restaurant_Close[]
  userLike    Restaurant_Like_By_User[]
  userFav     Restaurant_Favorite_By_User[]
  userSeen    Restaurant_Seen_By_User[]
  reviews     SReview_Restaurant_Review[]
}

model Restaurant_Detail {
  resId     String     @id
  phoneNo   String
  website   String
  location  String
  vicinity  String
  latitude  Float      @db.Real
  longitude Float      @db.Real
  detailOf  Restaurant @relation(fields: [resId], references: [resId], onDelete: Cascade)
}

model Restaurant_Image {
  imageId Int        @id @default(autoincrement())
  resId   String
  image   String
  imageOf Restaurant @relation(fields: [resId], references: [resId], onDelete: Cascade)
}

model Restaurant_Open {
  openId Int        @id @default(autoincrement())
  resId  String
  open   DateTime   @db.Timestamp(0)
  day    Int
  openOf Restaurant @relation(fields: [resId], references: [resId], onDelete: Cascade)
}

model Restaurant_Close {
  closeId Int        @id @default(autoincrement())
  resId   String
  close   DateTime   @db.Timestamp(0)
  day     Int
  openOf  Restaurant @relation(fields: [resId], references: [resId], onDelete: Cascade)
}

model Restaurant_Like_By_User {
  userId     String
  user       User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  resId      String
  restaurant Restaurant   @relation(fields: [resId], references: [resId], onDelete: Cascade)

  @@id([userId, resId])
}

model Restaurant_Favorite_By_User {
  userId     String
  user       User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  resId      String
  restaurant Restaurant   @relation(fields: [resId], references: [resId], onDelete: Cascade)

  @@id([userId, resId])
}

model Restaurant_Seen_By_User {
  userId     String
  user       User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  resId      String
  restaurant Restaurant   @relation(fields: [resId], references: [resId], onDelete: Cascade)
  seenAt     DateTime     @default(now()) @db.Timestamp(0)

  @@id([userId, resId])
}

//ShopReview Module
model SReview_Shop {
  shopId         String                @id @default(cuid())
  shopName       String
  shopType       String
  open           String
  close          String
  phoneNo        String
  address        String
  latitude       Float                 @db.Real
  longitude      Float                 @db.Real
  aveRating      Decimal               @db.Decimal(3, 2)
  reviewReceived Int
  images         SReview_Shop_Image[]
  reviews        SReview_Shop_Review[]
}

model SReview_Shop_Image {
  imageId Int          @id @default(autoincrement())
  shopId  String
  image   String
  imageOf SReview_Shop @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
}

model SReview_Review {
  reviewId         String                     @id @default(cuid())
  shopReview       SReview_Shop_Review?
  restaurantReview SReview_Restaurant_Review?
  images           SReview_Review_Image[]
  comments         SReview_Comment[]
}

model SReview_Shop_Review {
  reviewId     String                     @id
  shopId       String
  userId       String
  reviewedAt   DateTime                   @default(now()) @db.Timestamp(0)
  text         String
  rating       Int
  likeReceived Int
  review       SReview_Review             @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  reviewOf     SReview_Shop               @relation(fields: [shopId], references: [shopId], onDelete: Cascade)
  reviewBy     User_Profile               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userLike     SReview_Shop_Review_Like[]
}

model SReview_Restaurant_Review {
  reviewId     String                           @id
  resId        String
  userId       String
  reviewedAt   DateTime                         @default(now()) @db.Timestamp(0)
  text         String
  rating       Int
  likeReceived Int
  review       SReview_Review                   @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  reviewOf     Restaurant                       @relation(fields: [resId], references: [resId], onDelete: Cascade)
  reviewBy     User_Profile                     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userLike     SReview_Restaurant_Review_Like[]
}

model SReview_Review_Image {
  imageId  Int            @id @default(autoincrement())
  reviewId String
  image    String
  imageOf  SReview_Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
}

model SReview_Comment {
  commentId    Int                    @id @default(autoincrement())
  reviewId     String
  userId       String
  text         String
  commentedAt  DateTime               @default(now()) @db.Timestamp(0)
  likeReceived Int
  commentOf    SReview_Review         @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  commentBy    User_Profile           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userLike     SReview_Comment_Like[]
}

model SReview_Shop_Review_Like {
  reviewId   String
  shopReview SReview_Shop_Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  userId     String
  user       User_Profile        @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([reviewId, userId])
}

model SReview_Restaurant_Review_Like {
  reviewId         String
  restaurantReview SReview_Restaurant_Review @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  userId           String
  user             User_Profile              @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([reviewId, userId])
}

model SReview_Comment_Like {
  commentId Int
  comment   SReview_Comment @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
  userId    String
  user      User_Profile    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([commentId, userId])
}

model SReview_Suggestion {
  suggestId  Int          @id @default(autoincrement())
  userId     String
  suggestion String
  user       User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

//QA Module
model Question {
  qId         String               @id @default(cuid())
  userId      String?
  created     DateTime             @default(now()) @db.Timestamp(0)
  lastUpdated DateTime             @default(now()) @db.Timestamp(0)
  qTitle      String
  qDesc       String
  voteCount   Int
  qCreator    User_Profile?        @relation(fields: [userId], references: [userId], onDelete: SetNull)
  tags        Question_Tag[]
  file        Question_Embed_File?
  comments    Question_Comment[]
  answers     Question_Answer[]
  votes       Question_Modvote[]
}

model Question_Setting {
  userId      String       @id
  isAnonymous Boolean
  user        User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Question_Tag {
  tagKey Int                  @id
  tagId  Int
  qId    String
  tagOf  Question             @relation(fields: [qId], references: [qId], onDelete: Cascade)
  tagIs  Question_Default_Tag @relation(fields: [tagKey], references: [tagKey], onDelete: Cascade)
}

model Question_Default_Tag {
  tagKey  Int           @id @default(autoincrement())
  tagId   Int
  tagName String
  tag     Question_Tag?
}

model Question_Embed_File {
  qId      String   @id
  fileName String
  link     String
  fileOf   Question @relation(fields: [qId], references: [qId], onDelete: Cascade)
}

model Question_Comment {
  commentId   Int          @id @default(autoincrement())
  qId         String
  userId      String
  created     DateTime     @default(now()) @db.Timestamp(0)
  lastUpdated DateTime     @default(now()) @db.Timestamp(0)
  comment     String
  commentOf   Question     @relation(fields: [qId], references: [qId], onDelete: Cascade)
  commentor   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Question_Answer {
  answerId    String                      @id @default(cuid())
  qId         String
  userId      String
  created     DateTime                    @default(now()) @db.Timestamp(0)
  lastUpdated DateTime                    @default(now()) @db.Timestamp(0)
  text        String
  voteCount   Int
  aCreator    User_Profile                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  answerOf    Question                    @relation(fields: [qId], references: [qId], onDelete: Cascade)
  file        Question_Answer_Embed_File?
  comments    Question_Answer_Comment[]
}

model Question_Answer_Embed_File {
  answerId String          @id
  fileName String
  link     String
  fileOf   Question_Answer @relation(fields: [answerId], references: [answerId], onDelete: Cascade)
}

model Question_Answer_Comment {
  commentId   Int             @id @default(autoincrement())
  answerId    String
  userId      String
  created     DateTime        @default(now()) @db.Timestamp(0)
  lastUpdated DateTime        @default(now()) @db.Timestamp(0)
  comment     String
  commentOf   Question_Answer @relation(fields: [answerId], references: [answerId], onDelete: Cascade)
  commentor   User_Profile    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Question_Modvote {
  voteId      Int          @id @default(autoincrement())
  qId         String
  userId      String
  isUp        Boolean      @default(false)
  isDown      Boolean      @default(false)
  lastUpdated DateTime     @default(now()) @db.Timestamp(0)
  voteFor     Question     @relation(fields: [qId], references: [qId], onDelete: Cascade)
  voteBy      User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

//ShortLink Module
model ShortLink_Quota {
  userId    String       @id
  remaining Int
  user      User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model ShortLink {
  slId          String                         @id @default(cuid())
  userId        String
  originalLink  String
  shortenLink   String
  password      String                         @default("")
  expired       DateTime                       @default(dbgenerated("make_timestamp(3000, 1, 1, 0, 0, 0)")) @db.Timestamp(0)
  linkCreator   User_Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  permission    ShortLink_Permission?
  userAccess    ShortLink_Permission_User[]
  majorAccess   ShortLink_Permission_Major[]
  facultyAccess ShortLink_Permission_Faculty[]
}

model ShortLink_Permission {
  slId     String                    @id
  permType ShortLink_Permission_Type
  permOf   ShortLink                 @relation(fields: [slId], references: [slId], onDelete: Cascade)
}

enum ShortLink_Permission_Type {
  USER
  MAJOR
  FACULTY
  YEAR
}

model ShortLink_Permission_User {
  permId Int          @id @default(autoincrement())
  slId   String
  userId String
  sl     ShortLink    @relation(fields: [slId], references: [slId], onDelete: Cascade)
  user   User_Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model ShortLink_Permission_Major {
  permId  Int       @id @default(autoincrement())
  slId    String
  majorId String
  sl      ShortLink @relation(fields: [slId], references: [slId], onDelete: Cascade)
  major   Major     @relation(fields: [majorId], references: [majorId], onDelete: Cascade)
}

model ShortLink_Permission_Faculty {
  permId    Int       @id @default(autoincrement())
  slId      String
  facultyId String
  sl        ShortLink @relation(fields: [slId], references: [slId], onDelete: Cascade)
  faculty   Faculty   @relation(fields: [facultyId], references: [facultyId], onDelete: Cascade)
}

model ShortLink_Delete_Link {
  slId      String   @id
  deletedAt DateTime @default(now()) @db.Timestamp(0)
}

//Analytic Module
model Analytic_User_Access {
  userId             String       @id
  isGenUserReport    Boolean
  isGenOverallReport Boolean
  isGenModuleReport  Boolean
  isViewModuleReport Boolean
  user               User_Profile @relation(fields: [userId], references: [userId])
}

model Analytic_Report {
  reportId         Int                      @id @default(autoincrement())
  userId           String
  reportTime       DateTime                 @default(now()) @db.Timestamp(0)
  unAuthorizedView Int
  authorizedView   Int
  periodHours      Int
  user             User_Profile             @relation(fields: [userId], references: [userId])
  modules          Analytic_Report_Module[]
}

model Analytic_Report_Module {
  reportId         Int             @id @default(autoincrement())
  moduleName       String
  userId           String
  reportTime       DateTime        @default(now()) @db.Timestamp(0)
  unAuthorizedView Int
  authorizedView   Int
  periodHours      Int
  totalRequest     Int
  userActive       Int
  mostCountry      String
  genBy            User_Profile    @relation(fields: [userId], references: [userId])
  moduleOf         Analytic_Report @relation(fields: [reportId], references: [reportId])
}

model Analytic_View {
  viewId           String                            @id @default(cuid())
  time             DateTime                          @default(now()) @db.Timestamp(0)
  url              String
  module           String
  location         Json                              @db.JsonB //GeoJson
  ip               String
  externalPlatform String
  reports          Analytic_View_In_User_Report[]
  requests         Analytic_Request_In_User_Report[]
}

model Analytic_External_Platform {
  devId      Int             @id
  epName     String
  created    DateTime        @default(now()) @db.Timestamp(0)
  platformOf Analytic_Device @relation(fields: [devId], references: [devId])
}

model Analytic_User_Report {
  reportId       String                         @id @default(cuid())
  userId         String
  reportedAt     DateTime                       @db.Timestamp(0)
  timeActive     Int
  usedTimePerDay Int
  totalRequest   Int
  start          DateTime                       @default(now()) @db.Timestamp(0)
  end            DateTime                       @default(dbgenerated("make_timestamp(3000, 1, 1, 0, 0, 0)")) @db.Timestamp(0)
  genBy          User_Profile                   @relation(fields: [userId], references: [userId])
  views          Analytic_View_In_User_Report[]
}

model Analytic_View_In_User_Report {
  reportId   String
  userreport Analytic_User_Report @relation(fields: [reportId], references: [reportId])
  viewId     String
  view       Analytic_View        @relation(fields: [viewId], references: [viewId])

  @@id([reportId, viewId])
}

model Analytic_Request {
  reqId      String                            @id @default(cuid())
  userId     String
  module     String
  time       DateTime                          @default(now()) @db.Timestamp(0)
  body       Json                              @db.JsonB
  ip         String
  deviceName String
  location   Json                              @db.JsonB //GeoJson
  status     String
  views      Analytic_Request_In_User_Report[]
  devices    Analytic_Device[]
}

model Analytic_Device {
  devId    Int                         @id @default(autoincrement())
  reqId    String
  devName  String
  devOS    String
  created  DateTime                    @default(now()) @db.Timestamp(0)
  deviceOf Analytic_Request            @relation(fields: [reqId], references: [reqId])
  platform Analytic_External_Platform?
}

model Analytic_Request_In_User_Report {
  reqId   String
  request Analytic_Request @relation(fields: [reqId], references: [reqId])
  viewId  String
  view    Analytic_View    @relation(fields: [viewId], references: [viewId])

  @@id([reqId, viewId])
}
