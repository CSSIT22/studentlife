// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User Profile Module
model User_Profile {
  userId              String                 @id @default(uuid())
  studentId           String                 @unique
  fName               String
  lName               String
  email               String                 @unique
  image               Bytes?
  details             Detail?
  student_major       Int
  studentMajor        Major                  @relation(fields: [student_major], references: [majorId])
  role                Role?
  userFollowers       Follow[]               @relation("following")
  userFollowing       Follow[]               @relation("follower")
  userReporters       User_Report[]          @relation("reporting")
  userReporting       User_Report[]          @relation("reporter")
  userBlockers        User_Blocked[]         @relation("blocking")
  userBlocking        User_Blocked[]         @relation("blocker")
  levels              EXP?
  posts               Student_Post[]
  relationScore       Following_Rating[]
  reacted             Student_Reacted[]
  comment             Student_Comment[]
  pReported           Post_Report[]
  cReported           Comment_Report[]
  pHided              Hide_Post[]
  cHided              Hide_Comment[]
  notis               User_Noti_Object[]
  emailNotis          Noti_Setting_Email?
  appNotis            Noti_Setting_App?
  userTimetable       Timetable[]
  tasks               Task[]
  groups              User_To_Group[]
  taskTracking        Task_Track?
  taskChecking        Task_Check[]
  taskEditing         Task_History?
  announcement        Announcement[]
  userPinAnnouncement Announcement_Pin[]
  userSeeAnnouncement Announcement_Seen[]
  annApproved         Announcement_Approve[]
  cUser               Chat_User?
  inRoom              Chat_Room[]
  user_To_Room        User_To_Room[]
  userDating          Dating_Options?
  frontUserQueue      Card_Queue[]           @relation("Front User")
  backUserQueue       Card_Queue[]           @relation("Back User")
  giveRate            User_Rating[]          @relation("Receiver")
  receiveRate         User_Rating[]          @relation("Giver")
  giveHeart           Heart_History[]        @relation("HReceiver")
  receiveHeart        Heart_History[]        @relation("HGiver")
  interests           User_Interest[]
  datingSetting       Dating_Enroll?
  createPoll          Activity_Poll[]
  polls               Poll_Applicant[]
}

model Detail {
  userId  String       @unique
  birth   DateTime
  sex     String
  address String
  hobby   String
  phone   String
  year    Int
  student User_Profile @relation(fields: [userId], references: [userId])
}

model Major {
  majorId      Int            @id @default(autoincrement())
  majorName    String
  facultyId    Int
  student      User_Profile[]
  majorFaculty Faculty        @relation(fields: [facultyId], references: [facultyId])
}

model Faculty {
  facultyId   Int     @id @default(autoincrement())
  facultyName String
  major       Major[]
}

model Role {
  userId      String       @id
  club        String
  rank        String
  expire_date DateTime
  studentRole User_Profile @relation(fields: [userId], references: [userId])
}

model Follow {
  userId        String
  anotherUserId String
  status        Boolean
  date          DateTime     @default(now())
  follower      User_Profile @relation("follower", fields: [userId], references: [userId])
  following     User_Profile @relation("following", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model User_Report {
  userId        String
  anotherUserId String
  limit         Int
  reason        String
  date          DateTime     @default(now())
  reporter      User_Profile @relation("reporter", fields: [userId], references: [userId])
  reporting     User_Profile @relation("reporting", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model User_Blocked {
  userId        String
  anotherUserId String
  status        Boolean
  blocker       User_Profile @relation("blocker", fields: [userId], references: [userId])
  blocking      User_Profile @relation("blocking", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model EXP {
  userId    String        @id
  currentXP Int           @default(0)
  level     Int           @default(1)
  student   User_Profile  @relation(fields: [userId], references: [userId])
  userXp    Action_to_XP?
}

model Action_to_XP {
  userId     String   @id
  actionType String
  actionXp   Int
  date       DateTime
  xpGain     EXP      @relation(fields: [userId], references: [userId])
}

//Timeline & Post Module
model Student_Post {
  postId          String            @id @default(cuid())
  userId          String
  lastEdit        DateTime          @default(now())
  score           Int
  seen            Boolean
  postOwner       User_Profile      @relation(fields: [userId], references: [userId])
  postBody        Post_Body?
  images          Image_Container[]
  vids            Video_Container[]
  studentsReacted Student_Reacted[]
  studentsComment Student_Comment[]
  rePost          Repost[]
  userReported    Post_Report[]
  postHided       Hide_Post[]
}

model Following_Rating {
  userId      String
  followingId String
  score       Int
  scoreGiver  User_Profile @relation(fields: [userId], references: [userId])

  @@id([userId, followingId])
}

model Post_Body {
  bodyId String       @id @default(cuid())
  postId String       @unique
  text   String
  bodyOf Student_Post @relation(fields: [postId], references: [postId])
}

model Image_Container {
  imgId        String       @id @default(cuid())
  postId       String
  imageAddress String
  postImage    Student_Post @relation(fields: [postId], references: [postId])
}

model Video_Container {
  vidId      String       @id @default(cuid())
  postId     String
  vidAddress String
  postVid    Student_Post @relation(fields: [postId], references: [postId])
}

model Student_Reacted {
  reacter User_Profile     @relation(fields: [userId], references: [userId])
  userId  String
  reactOn Student_Post     @relation(fields: [postId], references: [postId])
  postId  String
  emoteId String
  emotes  Emote_Collection @relation(fields: [emoteId], references: [emoteId])

  @@id([userId, postId])
}

model Emote_Collection {
  emoteId String            @id @default(cuid())
  posts   Student_Reacted[]
}

model Student_Comment {
  commentId       String           @id
  commenter       User_Profile     @relation(fields: [userId], references: [userId])
  userId          String
  commentOn       Student_Post     @relation(fields: [postId], references: [postId])
  postId          String
  comment         String
  cmTime          DateTime
  commentReported Comment_Report[]
  commentHided    Hide_Comment[]
}

model Repost {
  newPostId    String       @id
  postId       String
  newUserId    String
  newPostTime  DateTime     @default(now())
  originalPost Student_Post @relation(fields: [postId], references: [postId])
}

model Post_Report {
  reporter User_Profile @relation(fields: [userId], references: [userId])
  userId   String
  reported Student_Post @relation(fields: [postId], references: [postId])
  postId   String
  reason   String

  @@id([userId, postId])
}

model Comment_Report {
  reporter  User_Profile    @relation(fields: [userId], references: [userId])
  userId    String
  reported  Student_Comment @relation(fields: [commentId], references: [commentId])
  commentId String
  reason    String

  @@id([userId, commentId])
}

model Hide_Post {
  hider  User_Profile @relation(fields: [userId], references: [userId])
  userId String
  hided  Student_Post @relation(fields: [postId], references: [postId])
  postId String

  @@id([userId, postId])
}

model Hide_Comment {
  hider     User_Profile    @relation(fields: [userId], references: [userId])
  userId    String
  hided     Student_Comment @relation(fields: [commentId], references: [commentId])
  commentId String

  @@id([userId, commentId])
}

//Notification Module
model User_Noti_Object {
  notiObject   Noti_Object  @relation(fields: [notiObjectId], references: [notiObjectId])
  notiObjectId String
  user         User_Profile @relation(fields: [userId], references: [userId])
  userId       String

  @@id([notiObjectId, userId])
}

model Noti_Object {
  notiObjectId String             @id
  templateId   String
  date         DateTime
  isRead       Boolean
  moduleId     String
  url          String
  users        User_Noti_Object[]
  template     Template           @relation(fields: [templateId], references: [templateId])
  values       Value[]
  module       Module             @relation(fields: [moduleId], references: [moduleId])
}

model Template {
  templateId  String        @id
  template    String
  notiObjects Noti_Object[]
}

model Value {
  valueId      String      @id
  value        String
  notiObjectId String
  valueOf      Noti_Object @relation(fields: [notiObjectId], references: [notiObjectId])
}

model Module {
  moduleId   String        @id
  moduleName String
  notiObject Noti_Object[]
}

model Noti_Type {
  notiTypeId   String              @id
  notiType     String              @default("All")
  notiTypeName String
  notiTypeDesc String
  emailSetting Noti_Setting_Email?
  appSetting   Noti_Setting_App?
}

model Noti_Setting_Email {
  userId      String       @unique
  userSetting User_Profile @relation(fields: [userId], references: [userId])
  notiTypeId  String       @unique
  notiSetting Noti_Type    @relation(fields: [notiTypeId], references: [notiTypeId])
}

model Noti_Setting_App {
  userId      String       @unique
  userSetting User_Profile @relation(fields: [userId], references: [userId])
  notiTypeId  String       @unique
  notiSetting Noti_Type    @relation(fields: [notiTypeId], references: [notiTypeId])
}

//Schedule Module
model Timetable {
  tableId   String       @id @default(cuid())
  userId    String
  eventId   String
  tableUser User_Profile @relation(fields: [userId], references: [userId])
}

model Event {
  eventId     String       @id @default(cuid())
  eventName   String
  placeId     String
  stTime      DateTime
  endTime     DateTime
  eventTypeId String
  descId      String       @unique
  hostAt      Event_Place  @relation(fields: [placeId], references: [placeId])
  desc        Description?
  // alert Schedule_Alert?
}

model Event_Place {
  placeId  String  @id @default(cuid())
  building String
  room     String
  events   Event[]
}

model Description {
  descId String @id @default(cuid())
  desc   String
  descOf Event  @relation(fields: [descId], references: [descId])
}

model Event_Type {
  eventTypeId String @id @default(cuid())
  eventType   String
}

model Course {
  courseId    String       @id @default(cuid())
  courseName  String
  lecturer    String
  assignments Assignment[]
}

model Assignment {
  assignmentId       String @id @default(cuid())
  courseId           String @default("0")
  assignmentName     String
  assignmentOfCourse Course @relation(fields: [courseId], references: [courseId])
}

// model Schedule_Alert {
//   alertId String @id @default(cuid())
//   eventId String @unique
//   eventAlert Event @relation(fields: [eventId], references: [eventId])
// }

//TodoList Module
model Task {
  taskId     String         @id @default(cuid())
  userId     String
  taskName   String
  taskDesc   String
  created    DateTime       @default(now())
  due        DateTime
  taskType   String
  folderId   String
  groupId    String
  taskOfUser User_Profile   @relation(fields: [userId], references: [userId])
  inFolder   Task_Folder    @relation(fields: [folderId], references: [folderId])
  inGroup    Task_Group     @relation(fields: [groupId], references: [groupId])
  checkTask  Task_Check?
  edits      Task_History[]
}

model Task_Folder {
  folderId   String @id @default(cuid())
  folderName String
  tasks      Task[]
}

model Task_Group {
  groupId   String          @id @default(cuid())
  groupName String
  groups    Task[]
  users     User_To_Group[]
}

model User_To_Group {
  user    User_Profile @relation(fields: [userId], references: [userId])
  userId  String
  group   Task_Group   @relation(fields: [groupId], references: [groupId])
  groupId String

  @@id([userId, groupId])
}

model Task_Track {
  trackingId String       @id @default(cuid())
  userId     String       @unique
  percentage Float
  userTask   User_Profile @relation(fields: [userId], references: [userId])
}

model Task_Check {
  taskId    String       @unique
  userId    String
  isCheck   Boolean      @default(false)
  taskCheck Task         @relation(fields: [taskId], references: [taskId])
  userCheck User_Profile @relation(fields: [userId], references: [userId])

  @@id([taskId, userId])
}

model Task_History {
  taskId   String
  userId   String       @unique
  date     DateTime
  editTask Task         @relation(fields: [taskId], references: [taskId])
  editor   User_Profile @relation(fields: [userId], references: [userId])

  @@id([taskId, userId])
}

//Announcement Module
model Announcement {
  postId      String                @id @default(cuid())
  userId      String
  languageId  Int
  annTopic    String
  annDetail   String
  filterId    Int
  annCreated  DateTime              @default(now())
  annExpired  DateTime
  isApprove   Boolean               @default(false)
  annCreator  User_Profile          @relation(fields: [userId], references: [userId])
  annLanguage Post_To_Language[]
  annPost     Announcement_Post?
  annPin      Announcement_Pin[]
  annSee      Announcement_Seen[]
  annApprove  Announcement_Approve?
}

model Announcement_Filter {
  filterId   Int    @id @default(autoincrement())
  filterType String
  value      String
}

model Announcement_Language {
  languageId       Int                @id @default(autoincrement())
  language         String
  announcementPost Post_To_Language[]
}

model Post_To_Language {
  post       Announcement          @relation(fields: [postId], references: [postId])
  postId     String
  language   Announcement_Language @relation(fields: [languageId], references: [languageId])
  languageId Int

  @@id([postId, languageId])
}

model Announcement_Post {
  statusId     Int          @id @default(autoincrement())
  postId       String       @unique
  status       String       @default("Waiting for Approve")
  announcement Announcement @relation(fields: [postId], references: [postId])
}

model Announcement_Delete {
  delId    Int      @id @default(autoincrement())
  postId   String
  deleteAt DateTime @default(now())
}

model Announcement_Pin {
  post   Announcement @relation(fields: [postId], references: [postId])
  postId String
  user   User_Profile @relation(fields: [userId], references: [userId])
  userId String
  status Boolean      @default(false)

  @@id([postId, userId])
}

model Announcement_Seen {
  post   Announcement @relation(fields: [postId], references: [postId])
  postId String
  user   User_Profile @relation(fields: [userId], references: [userId])
  userId String
  seenAt DateTime     @default(now())

  @@id([postId, userId])
}

model Announcement_Approve {
  userId      String
  postId      String       @unique
  approveTime DateTime     @default(now())
  approvedBy  User_Profile @relation(fields: [userId], references: [userId])
  postApprove Announcement @relation(fields: [postId], references: [postId])

  @@id([userId, postId])
}

//Chat Module
model Chat_User {
  cUserId     String       @unique
  username    String
  cUserToUser User_Profile @relation(fields: [cUserId], references: [userId])
}

model Chat_Room {
  roomId             String         @id @default(cuid())
  roomName           String
  chatColor          String
  created            DateTime       @default(now())
  deleted            DateTime
  roomType           Room_Type
  roomGroup          Chat_Group?
  haveUser           User_To_Room[]
  User_Profile       User_Profile?  @relation(fields: [user_ProfileUserId], references: [userId])
  user_ProfileUserId String?
  messages           Message[]
  quotes             Chat_Quote[]
}

model User_To_Room {
  user     User_Profile @relation(fields: [userId], references: [userId])
  userId   String
  room     Chat_Room    @relation(fields: [roomId], references: [roomId])
  roomId   String
  nickname String

  @@id([userId, roomId])
}

model Chat_Group {
  roomId   String    @unique
  joined   DateTime  @default(now())
  lefted   DateTime
  groupImg String
  room     Chat_Room @relation(fields: [roomId], references: [roomId])
}

model Message {
  messageId     String       @id @default(cuid())
  roomId        String
  senderId      String
  messageType   Message_Type
  created       DateTime     @default(now())
  isRead        Boolean      @default(false)
  messageInRoom Chat_Room    @relation(fields: [roomId], references: [roomId])
}

model Chat_Quote {
  quoteId  Int       @id @default(autoincrement())
  roomId   String
  userId   String
  created  DateTime  @default(now())
  text     String
  quoteFor Chat_Room @relation(fields: [roomId], references: [roomId])
}

model Chat_Sticker {
  stickerId   Int    @id @default(autoincrement())
  stickerName String
  stickerLink String
}

model Chat_Restaurant {
  rKey           Int    @id @default(autoincrement())
  restaurantId   String
  restaurantName String
}

model Chat_Transaction {
  tKey          Int    @id @default(autoincrement())
  transactionId Int
  payerId       String
  receiverId    String
  qrGen         String
}

enum Room_Type {
  INDIVIDUAL
  GROUP
}

enum Message_Type {
  TEXT
  QUOTE
  STICKER
}

//Dating Module
model Dating_Options {
  userId     String         @unique
  ageMin     Int
  ageMax     Int
  genderPref String
  useAge     Boolean
  user       User_Profile   @relation(fields: [userId], references: [userId])
  faculties  Faculty_Pref[]
}

model Faculty_Pref {
  userId      String
  facultyPref String
  user        Dating_Options @relation(fields: [userId], references: [userId])

  @@id([userId, facultyPref])
}

model Card_Queue {
  userId      String       @unique
  frontUserId String
  backUserId  String
  frontUser   User_Profile @relation("Front User", fields: [frontUserId], references: [userId])
  backUser    User_Profile @relation("Back User", fields: [backUserId], references: [userId])
}

model User_Rating {
  userId        String
  anotherUserId String
  score         Int
  scoreGiver    User_Profile @relation("Giver", fields: [userId], references: [userId])
  scoreReceiver User_Profile @relation("Receiver", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Heart_History {
  userId        String
  anotherUserId String
  heartedAt     DateTime     @default(now())
  isSkipped     Boolean
  heartGiver    User_Profile @relation("HGiver", fields: [userId], references: [userId])
  heartReceiver User_Profile @relation("HReceiver", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Interest {
  interestId   Int             @id @default(autoincrement())
  interestName String
  users        User_Interest[]
  polls        Poll_Interest[]
}

model User_Interest {
  user       User_Profile @relation(fields: [userId], references: [userId])
  userId     String
  interest   Interest     @relation(fields: [interestId], references: [interestId])
  interestId Int

  @@id([userId, interestId])
}

model Dating_Enroll {
  userId              String       @unique
  hasCompleteTutorial Boolean
  hasCompleteSetting  Boolean
  userDating          User_Profile @relation(fields: [userId], references: [userId])
}

model Activity_Poll {
  pollId         String           @id @default(cuid())
  userId         String
  pollName       String
  pollPlace      String
  pollAppointAt  DateTime
  pollText       String
  participantMin Int
  participantMax Int
  isOpen         Boolean
  pollcreated    DateTime         @default(now())
  // roomId         String
  pollCreator    User_Profile     @relation(fields: [userId], references: [userId])
  participants   Poll_Applicant[]
  interests      Poll_Interest[]
}

model Poll_Applicant {
  user         User_Profile  @relation(fields: [userId], references: [userId])
  userId       String
  poll         Activity_Poll @relation(fields: [pollId], references: [pollId])
  pollId       String
  isAccepted   Boolean
  registerTime DateTime

  @@id([userId, pollId])
}

model Poll_Interest {
  pollId             String
  activityInterestId Int
  pollInterest       Activity_Poll @relation(fields: [pollId], references: [pollId])
  interest           Interest      @relation(fields: [activityInterestId], references: [interestId])

  @@id([pollId, activityInterestId])
}
