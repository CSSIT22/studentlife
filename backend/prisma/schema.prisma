// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User Profile Module
model User_profile {
  userId          String         @id @default(uuid())
  studentId       String
  fName           String
  lName           String
  email           String         @unique
  image           Bytes?
  details         Detail?
  student_major   String
  studentMajor    Major          @relation(fields: [student_major], references: [majorId])
  role            Role?
  userFollowers   Follow[]       @relation("following")
  userFollowing   Follow[]       @relation("follower")
  friends         Friend[]       @relation("friends")
  friendsRelation Friend[]       @relation("friendsWith")
  userReporters   Report[]       @relation("reporting")
  userReporting   Report[]       @relation("reporter")
  userBlockers    Block_Friend[] @relation("blocking")
  userBlocking    Block_Friend[] @relation("blocker")
  levels          EXP?
}

model Detail {
  id      String       @unique
  birth   DateTime
  sex     String
  address String
  hobby   String
  phone   String
  year    Int
  student User_profile @relation(fields: [id], references: [userId])
}

model Major {
  majorId      String         @id
  majorName    String
  facultyId    String
  student      User_profile[]
  majorFaculty Faculty        @relation(fields: [facultyId], references: [facultyId])
}

model Faculty {
  facultyId   String  @id
  facultyName String
  major       Major[]
}

model Role {
  userId      String       @id
  club        String
  rank        String
  expire_date DateTime
  studentRole User_profile @relation(fields: [userId], references: [userId])
}

model Follow {
  userId        String
  anotherUserId String
  status        Boolean
  date          DateTime     @default(now())
  follower      User_profile @relation("follower", fields: [userId], references: [userId])
  following     User_profile @relation("following", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Friend {
  userId        String
  anotherUserId String
  status        Boolean
  date          DateTime     @default(now())
  friends       User_profile @relation("friends", fields: [userId], references: [userId])
  friendsWith   User_profile @relation("friendsWith", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Report {
  userId        String
  anotherUserId String
  limit         Int
  reason        String
  date          DateTime     @default(now())
  reporter      User_profile @relation("reporter", fields: [userId], references: [userId])
  reporting     User_profile @relation("reporting", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Block_Friend {
  userId        String
  anotherUserId String
  status        Boolean
  blocker       User_profile @relation("blocker", fields: [userId], references: [userId])
  blocking      User_profile @relation("blocking", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model EXP {
  userId    String        @id
  currentXP Int           @default(0)
  level     Int           @default(1)
  student   User_profile  @relation(fields: [userId], references: [userId])
  userXp    Action_to_XP?
}

model Action_to_XP {
  userId     String   @id
  actionType String
  actionXp   Int
  date       DateTime
  xpGain     EXP      @relation(fields: [userId], references: [userId])
}
