// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User Profile Module
model User_profile {
  userId        String             @id @default(uuid())
  studentId     String
  fName         String
  lName         String
  email         String             @unique
  image         Bytes?
  details       Detail?
  student_major String
  studentMajor  Major              @relation(fields: [student_major], references: [majorId])
  role          Role?
  userFollowers Follow[]           @relation("following")
  userFollowing Follow[]           @relation("follower")
  userReporters User_Report[]      @relation("reporting")
  userReporting User_Report[]      @relation("reporter")
  userBlockers  Block_Friend[]     @relation("blocking")
  userBlocking  Block_Friend[]     @relation("blocker")
  levels        EXP?
  posts         Student_Post[]
  relationScore Following_Rating[]
  reacted       Student_Reacted[]
  comment       Student_Comment[]
  pReported     Post_Report[]
  cReported     Comment_Report[]
  pHided        Hide_Post[]
  cHided        Hide_Comment[]
}

model Detail {
  id      String       @unique
  birth   DateTime
  sex     String
  address String
  hobby   String
  phone   String
  year    Int
  student User_profile @relation(fields: [id], references: [userId])
}

model Major {
  majorId      String         @id
  majorName    String
  facultyId    String
  student      User_profile[]
  majorFaculty Faculty        @relation(fields: [facultyId], references: [facultyId])
}

model Faculty {
  facultyId   String  @id
  facultyName String
  major       Major[]
}

model Role {
  userId      String       @id
  club        String
  rank        String
  expire_date DateTime
  studentRole User_profile @relation(fields: [userId], references: [userId])
}

model Follow {
  userId        String
  anotherUserId String
  status        Boolean
  date          DateTime     @default(now())
  follower      User_profile @relation("follower", fields: [userId], references: [userId])
  following     User_profile @relation("following", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model User_Report {
  userId        String
  anotherUserId String
  limit         Int
  reason        String
  date          DateTime     @default(now())
  reporter      User_profile @relation("reporter", fields: [userId], references: [userId])
  reporting     User_profile @relation("reporting", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Block_Friend {
  userId        String
  anotherUserId String
  status        Boolean
  blocker       User_profile @relation("blocker", fields: [userId], references: [userId])
  blocking      User_profile @relation("blocking", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model EXP {
  userId    String        @id
  currentXP Int           @default(0)
  level     Int           @default(1)
  student   User_profile  @relation(fields: [userId], references: [userId])
  userXp    Action_to_XP?
}

model Action_to_XP {
  userId     String   @id
  actionType String
  actionXp   Int
  date       DateTime
  xpGain     EXP      @relation(fields: [userId], references: [userId])
}

//Timeline & Post
model Student_Post {
  postId          String            @id
  userId          String
  lastEdit        DateTime          @default(now())
  score           Int
  seen            Boolean
  postOwner       User_profile      @relation(fields: [userId], references: [userId])
  postBody        Post_Body?
  images          Image_Container[]
  vids            Video_Container[]
  studentsReacted Student_Reacted[]
  studentsComment Student_Comment[]
  rePost          Repost[]
  userReported    Post_Report[]
  postHided       Hide_Post[]
}

model Following_Rating {
  userId      String
  followingId String
  score       Int
  scoreGiver  User_profile @relation(fields: [userId], references: [userId])

  @@id([userId, followingId])
}

model Post_Body {
  postId String       @id
  text   String
  bodyOf Student_Post @relation(fields: [postId], references: [postId])
}

model Image_Container {
  imgId        String       @id
  postId       String
  imageAddress String
  postImage    Student_Post @relation(fields: [postId], references: [postId])
}

model Video_Container {
  vidId      String       @id
  postId     String
  vidAddress String
  postVid    Student_Post @relation(fields: [postId], references: [postId])
}

model Student_Reacted {
  reacter User_profile @relation(fields: [userId], references: [userId])
  userId  String
  reactOn Student_Post @relation(fields: [postId], references: [postId])
  postId  String
  emoteId String

  @@id([userId, postId])
}

model Student_Comment {
  commentId       String           @id
  commenter       User_profile     @relation(fields: [userId], references: [userId])
  userId          String
  commentOn       Student_Post     @relation(fields: [postId], references: [postId])
  postId          String
  comment         String
  cmTime          DateTime
  commentReported Comment_Report[]
  commentHided    Hide_Comment[]
}

model Repost {
  newPostId    String       @id
  postId       String
  newUserId    String
  newPostTime  DateTime     @default(now())
  originalPost Student_Post @relation(fields: [postId], references: [postId])
}

model Post_Report {
  reporter User_profile @relation(fields: [userId], references: [userId])
  userId   String
  reported Student_Post @relation(fields: [postId], references: [postId])
  postId   String
  reason   String

  @@id([userId, postId])
}

model Comment_Report {
  reporter  User_profile    @relation(fields: [userId], references: [userId])
  userId    String
  reported  Student_Comment @relation(fields: [commentId], references: [commentId])
  commentId String
  reason    String

  @@id([userId, commentId])
}

model Hide_Post {
  hider  User_profile @relation(fields: [userId], references: [userId])
  userId String
  hided  Student_Post @relation(fields: [postId], references: [postId])
  postId String

  @@id([userId, postId])
}

model Hide_Comment {
  hider     User_profile    @relation(fields: [userId], references: [userId])
  userId    String
  hided     Student_Comment @relation(fields: [commentId], references: [commentId])
  commentId String

  @@id([userId, commentId])
}
