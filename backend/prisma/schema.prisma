// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User Profile Module
model User_Profile {
  userId               String                           @id @default(uuid())
  studentId            String                           @unique
  fName                String
  lName                String
  email                String                           @unique
  image                Bytes?
  details              Detail?
  student_major        Int
  studentMajor         Major                            @relation(fields: [student_major], references: [majorId])
  role                 Role?
  userFollowers        Follow[]                         @relation("following")
  userFollowing        Follow[]                         @relation("follower")
  userReporters        User_Report[]                    @relation("reporting")
  userReporting        User_Report[]                    @relation("reporter")
  userBlockers         User_Blocked[]                   @relation("blocking")
  userBlocking         User_Blocked[]                   @relation("blocker")
  levels               EXP?
  posts                Student_Post[]
  relationScore        Following_Rating[]
  reacted              Student_Reacted[]
  pComments            Post_Comment[]
  pReported            Post_Report[]
  cReported            Comment_Report[]
  pHided               Hide_Post[]
  cHided               Hide_Comment[]
  notis                User_Noti_Object[]
  emailNotis           Noti_Setting_Email?
  appNotis             Noti_Setting_App?
  userTimetable        Timetable[]
  tasks                Task[]
  groups               User_To_Group[]
  taskTracking         Task_Track?
  taskChecking         Task_Check[]
  taskEditing          Task_History?
  announcement         Announcement[]
  userPinAnnouncement  Announcement_Pin[]
  userSeeAnnouncement  Announcement_Seen[]
  annApproved          Announcement_Approve[]
  cUser                Chat_User?
  inRoom               Chat_Room[]
  user_To_Room         User_To_Room[]
  userDating           Dating_Options?
  frontUserQueue       Card_Queue[]                     @relation("Front User")
  backUserQueue        Card_Queue[]                     @relation("Back User")
  giveRate             User_Rating[]                    @relation("Receiver")
  receiveRate          User_Rating[]                    @relation("Giver")
  giveHeart            Heart_History[]                  @relation("HReceiver")
  receiveHeart         Heart_History[]                  @relation("HGiver")
  interests            User_Interest[]
  datingSetting        Dating_Enroll?
  createPoll           Activity_Poll[]
  polls                Poll_Applicant[]
  community            Community_User[]
  communityBlacklist   Community_Blacklist[]
  communityRole        Community_Role[]
  files                User_Show_File[]
  fComments            File_Comment[]
  accessTo             Direct_Access[]
  banInstances         Ban_Status[]
  wordReport           wordReport[]
  shortNotes           Sn_Head[]
  voteTo               Sn_Votedetail[]
  snComments           Sn_Comment[]
  favSn                Sn_Fav[]
  recentSn             Sn_Recent[]
  accessSn             Sn_Access[]
  transactions         Transaction[]
  kmuttPoint           Kmutt_Point?
  coupons              User_Coupon[]
  carts                Shop_Cart[]
  reviewProduct        Shop_Product_Review[]
  likeRestaurants      Restaurant_Like_By_User[]
  favRestaurants       Restaurant_Favorite_By_User[]
  seenRestaurants      Restaurant_Seen_By_User[]
  shopReview           SReview_Shop_Review[]
  restaurantReview     SReview_Restaurant_Review[]
  shopReviewLike       SReview_Shop_Review_Like[]
  restaurantReviewLike SReview_Restaurant_Review_Like[]
  commentLike          SReview_Comment_Like[]
  suggestions          SReview_Suggestion[]
}

model Detail {
  userId  String       @unique
  birth   DateTime
  sex     String
  address String
  hobby   String
  phone   String
  year    Int
  student User_Profile @relation(fields: [userId], references: [userId])
}

model Major {
  majorId      Int            @id @default(autoincrement())
  majorName    String
  facultyId    Int
  student      User_Profile[]
  majorFaculty Faculty        @relation(fields: [facultyId], references: [facultyId])
  accessTo     Major_Access[]
}

model Faculty {
  facultyId   Int     @id @default(autoincrement())
  facultyName String
  major       Major[]
}

model Role {
  userId          String           @id
  club            String
  rank            String
  expire_date     DateTime
  studentRole     User_Profile     @relation(fields: [userId], references: [userId])
  roleInCommunity Community_Role[]
}

model Follow {
  userId        String
  anotherUserId String
  status        Boolean
  date          DateTime     @default(now())
  follower      User_Profile @relation("follower", fields: [userId], references: [userId])
  following     User_Profile @relation("following", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model User_Report {
  userId        String
  anotherUserId String
  limit         Int
  reason        String
  date          DateTime     @default(now())
  reporter      User_Profile @relation("reporter", fields: [userId], references: [userId])
  reporting     User_Profile @relation("reporting", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model User_Blocked {
  userId        String
  anotherUserId String
  status        Boolean
  blocker       User_Profile @relation("blocker", fields: [userId], references: [userId])
  blocking      User_Profile @relation("blocking", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model EXP {
  userId    String        @id
  currentXP Int           @default(0)
  level     Int           @default(1)
  student   User_Profile  @relation(fields: [userId], references: [userId])
  userXp    Action_to_XP?
}

model Action_to_XP {
  userId     String   @id
  actionType String
  actionXp   Int
  date       DateTime
  xpGain     EXP      @relation(fields: [userId], references: [userId])
}

//Timeline & Post Module
model Student_Post {
  postId          String            @id @default(cuid())
  userId          String
  lastEdit        DateTime          @default(now())
  score           Int
  seen            Boolean
  postOwner       User_Profile      @relation(fields: [userId], references: [userId])
  postBody        Post_Body?
  images          Image_Container[]
  vids            Video_Container[]
  studentsReacted Student_Reacted[]
  studentsComment Post_Comment[]
  rePost          Repost[]
  userReported    Post_Report[]
  postHided       Hide_Post[]
  communityPost   Community_Post?
}

model Following_Rating {
  userId      String
  followingId String
  score       Int
  scoreGiver  User_Profile @relation(fields: [userId], references: [userId])

  @@id([userId, followingId])
}

model Post_Body {
  bodyId String       @id @default(cuid())
  postId String       @unique
  text   String
  bodyOf Student_Post @relation(fields: [postId], references: [postId])
}

model Image_Container {
  imgId        String       @id @default(cuid())
  postId       String
  imageAddress String
  postImage    Student_Post @relation(fields: [postId], references: [postId])
}

model Video_Container {
  vidId      String       @id @default(cuid())
  postId     String
  vidAddress String
  postVid    Student_Post @relation(fields: [postId], references: [postId])
}

model Student_Reacted {
  reacter User_Profile     @relation(fields: [userId], references: [userId])
  userId  String
  reactOn Student_Post     @relation(fields: [postId], references: [postId])
  postId  String
  emoteId String
  emotes  Emote_Collection @relation(fields: [emoteId], references: [emoteId])

  @@id([userId, postId])
}

model Emote_Collection {
  emoteId String            @id @default(cuid())
  posts   Student_Reacted[]
}

model Post_Comment {
  commentId       String           @id @default(cuid())
  commenter       User_Profile     @relation(fields: [userId], references: [userId])
  userId          String
  commentOn       Student_Post     @relation(fields: [postId], references: [postId])
  postId          String
  comment         String
  cmTime          DateTime
  commentReported Comment_Report[]
  commentHided    Hide_Comment[]
}

model Repost {
  newPostId    String       @id
  postId       String
  newUserId    String
  newPostTime  DateTime     @default(now())
  originalPost Student_Post @relation(fields: [postId], references: [postId])
}

model Post_Report {
  reporter User_Profile @relation(fields: [userId], references: [userId])
  userId   String
  reported Student_Post @relation(fields: [postId], references: [postId])
  postId   String
  reason   String

  @@id([userId, postId])
}

model Comment_Report {
  reporter  User_Profile @relation(fields: [userId], references: [userId])
  userId    String
  reported  Post_Comment @relation(fields: [commentId], references: [commentId])
  commentId String
  reason    String

  @@id([userId, commentId])
}

model Hide_Post {
  hider  User_Profile @relation(fields: [userId], references: [userId])
  userId String
  hided  Student_Post @relation(fields: [postId], references: [postId])
  postId String

  @@id([userId, postId])
}

model Hide_Comment {
  hider     User_Profile @relation(fields: [userId], references: [userId])
  userId    String
  hided     Post_Comment @relation(fields: [commentId], references: [commentId])
  commentId String

  @@id([userId, commentId])
}

//Notification Module
model User_Noti_Object {
  notiObject   Noti_Object  @relation(fields: [notiObjectId], references: [notiObjectId])
  notiObjectId String
  user         User_Profile @relation(fields: [userId], references: [userId])
  userId       String

  @@id([notiObjectId, userId])
}

model Noti_Object {
  notiObjectId String             @id
  templateId   String
  date         DateTime
  isRead       Boolean
  moduleId     String
  url          String
  users        User_Noti_Object[]
  template     Template           @relation(fields: [templateId], references: [templateId])
  values       Value[]
  module       Module             @relation(fields: [moduleId], references: [moduleId])
}

model Template {
  templateId  String        @id
  template    String
  notiObjects Noti_Object[]
}

model Value {
  valueId      String      @id
  value        String
  notiObjectId String
  valueOf      Noti_Object @relation(fields: [notiObjectId], references: [notiObjectId])
}

model Module {
  moduleId   String        @id
  moduleName String
  notiObject Noti_Object[]
}

model Noti_Type {
  notiTypeId   String              @id
  notiType     String              @default("All")
  notiTypeName String
  notiTypeDesc String
  emailSetting Noti_Setting_Email?
  appSetting   Noti_Setting_App?
}

model Noti_Setting_Email {
  userId      String       @unique
  userSetting User_Profile @relation(fields: [userId], references: [userId])
  notiTypeId  String       @unique
  notiSetting Noti_Type    @relation(fields: [notiTypeId], references: [notiTypeId])
}

model Noti_Setting_App {
  userId      String       @unique
  userSetting User_Profile @relation(fields: [userId], references: [userId])
  notiTypeId  String       @unique
  notiSetting Noti_Type    @relation(fields: [notiTypeId], references: [notiTypeId])
}

//Schedule Module
model Timetable {
  tableId   String       @id @default(cuid())
  userId    String
  eventId   String
  tableUser User_Profile @relation(fields: [userId], references: [userId])
}

model Event {
  eventId     String       @id @default(cuid())
  eventName   String
  placeId     String
  stTime      DateTime
  endTime     DateTime
  eventTypeId String
  descId      String       @unique
  hostAt      Event_Place  @relation(fields: [placeId], references: [placeId])
  desc        Description?
  // alert Schedule_Alert?
}

model Event_Place {
  placeId  String  @id @default(cuid())
  building String
  room     String
  events   Event[]
}

model Description {
  descId String @id @default(cuid())
  desc   String
  descOf Event  @relation(fields: [descId], references: [descId])
}

model Event_Type {
  eventTypeId String @id @default(cuid())
  eventType   String
}

model Course {
  courseId    String       @id @default(cuid())
  courseName  String
  lecturer    String
  assignments Assignment[]
  shortNotes  Sn_Head[]
}

model Assignment {
  assignmentId       String @id @default(cuid())
  courseId           String @default("0")
  assignmentName     String
  assignmentOfCourse Course @relation(fields: [courseId], references: [courseId])
}

// model Schedule_Alert {
//   alertId String @id @default(cuid())
//   eventId String @unique
//   eventAlert Event @relation(fields: [eventId], references: [eventId])
// }

//TodoList Module
model Task {
  taskId     String         @id @default(cuid())
  userId     String
  taskName   String
  taskDesc   String
  created    DateTime       @default(now())
  due        DateTime
  taskType   String
  folderId   String
  groupId    String
  taskOfUser User_Profile   @relation(fields: [userId], references: [userId])
  inFolder   Task_Folder    @relation(fields: [folderId], references: [folderId])
  inGroup    Task_Group     @relation(fields: [groupId], references: [groupId])
  checkTask  Task_Check?
  edits      Task_History[]
}

model Task_Folder {
  folderId   String @id @default(cuid())
  folderName String
  tasks      Task[]
}

model Task_Group {
  groupId   String          @id @default(cuid())
  groupName String
  groups    Task[]
  users     User_To_Group[]
}

model User_To_Group {
  user    User_Profile @relation(fields: [userId], references: [userId])
  userId  String
  group   Task_Group   @relation(fields: [groupId], references: [groupId])
  groupId String

  @@id([userId, groupId])
}

model Task_Track {
  trackingId String       @id @default(cuid())
  userId     String       @unique
  percentage Float
  userTask   User_Profile @relation(fields: [userId], references: [userId])
}

model Task_Check {
  taskId    String       @unique
  userId    String
  isCheck   Boolean      @default(false)
  taskCheck Task         @relation(fields: [taskId], references: [taskId])
  userCheck User_Profile @relation(fields: [userId], references: [userId])

  @@id([taskId, userId])
}

model Task_History {
  taskId   String
  userId   String       @unique
  date     DateTime
  editTask Task         @relation(fields: [taskId], references: [taskId])
  editor   User_Profile @relation(fields: [userId], references: [userId])

  @@id([taskId, userId])
}

//Announcement Module
model Announcement {
  postId      String                @id @default(cuid())
  userId      String
  languageId  Int
  annTopic    String
  annDetail   String
  filterId    Int
  annCreated  DateTime              @default(now())
  annExpired  DateTime
  isApprove   Boolean               @default(false)
  annCreator  User_Profile          @relation(fields: [userId], references: [userId])
  annLanguage Post_To_Language[]
  annPost     Announcement_Post?
  annPin      Announcement_Pin[]
  annSee      Announcement_Seen[]
  annApprove  Announcement_Approve?
}

model Announcement_Filter {
  filterId   Int    @id @default(autoincrement())
  filterType String
  value      String
}

model Announcement_Language {
  languageId       Int                @id @default(autoincrement())
  language         String
  announcementPost Post_To_Language[]
}

model Post_To_Language {
  post       Announcement          @relation(fields: [postId], references: [postId])
  postId     String
  language   Announcement_Language @relation(fields: [languageId], references: [languageId])
  languageId Int

  @@id([postId, languageId])
}

model Announcement_Post {
  statusId     Int          @id @default(autoincrement())
  postId       String       @unique
  status       String       @default("Waiting for Approve")
  announcement Announcement @relation(fields: [postId], references: [postId])
}

model Announcement_Delete {
  delId    Int      @id @default(autoincrement())
  postId   String
  deleteAt DateTime @default(now())
}

model Announcement_Pin {
  post   Announcement @relation(fields: [postId], references: [postId])
  postId String
  user   User_Profile @relation(fields: [userId], references: [userId])
  userId String
  status Boolean      @default(false)

  @@id([postId, userId])
}

model Announcement_Seen {
  post   Announcement @relation(fields: [postId], references: [postId])
  postId String
  user   User_Profile @relation(fields: [userId], references: [userId])
  userId String
  seenAt DateTime     @default(now())

  @@id([postId, userId])
}

model Announcement_Approve {
  userId      String
  postId      String       @unique
  approveTime DateTime     @default(now())
  approvedBy  User_Profile @relation(fields: [userId], references: [userId])
  postApprove Announcement @relation(fields: [postId], references: [postId])

  @@id([userId, postId])
}

//Chat Module
model Chat_User {
  cUserId     String       @unique
  username    String
  cUserToUser User_Profile @relation(fields: [cUserId], references: [userId])
}

model Chat_Room {
  roomId             String             @id @default(cuid())
  roomName           String
  chatColor          String
  created            DateTime           @default(now())
  deleted            DateTime
  roomType           Room_Type
  roomGroup          Chat_Group?
  haveUser           User_To_Room[]
  User_Profile       User_Profile?      @relation(fields: [user_ProfileUserId], references: [userId])
  user_ProfileUserId String?
  messages           Message[]
  quotes             Chat_Quote[]
  wordReport         wordReportDetail[]
}

model User_To_Room {
  user     User_Profile @relation(fields: [userId], references: [userId])
  userId   String
  room     Chat_Room    @relation(fields: [roomId], references: [roomId])
  roomId   String
  nickname String

  @@id([userId, roomId])
}

model Chat_Group {
  roomId   String    @unique
  joined   DateTime  @default(now())
  lefted   DateTime
  groupImg String
  room     Chat_Room @relation(fields: [roomId], references: [roomId])
}

model Message {
  messageId     String       @id @default(cuid())
  roomId        String
  senderId      String
  messageType   Message_Type
  created       DateTime     @default(now())
  isRead        Boolean      @default(false)
  messageInRoom Chat_Room    @relation(fields: [roomId], references: [roomId])
}

model Chat_Quote {
  quoteId  Int       @id @default(autoincrement())
  roomId   String
  userId   String
  created  DateTime  @default(now())
  text     String
  quoteFor Chat_Room @relation(fields: [roomId], references: [roomId])
}

model Chat_Sticker {
  stickerId   Int    @id @default(autoincrement())
  stickerName String
  stickerLink String
}

model Chat_Restaurant {
  rKey           Int    @id @default(autoincrement())
  restaurantId   String
  restaurantName String
}

model Chat_Transaction {
  tKey        Int         @id @default(autoincrement())
  transId     String      @unique
  payerId     String
  receiverId  String
  qrGen       String
  transaction Transaction @relation(fields: [transId], references: [transId])
}

enum Room_Type {
  INDIVIDUAL
  GROUP
}

enum Message_Type {
  TEXT
  QUOTE
  STICKER
}

//Dating Module
model Dating_Options {
  userId     String         @unique
  ageMin     Int
  ageMax     Int
  genderPref String
  useAge     Boolean
  user       User_Profile   @relation(fields: [userId], references: [userId])
  faculties  Faculty_Pref[]
}

model Faculty_Pref {
  userId      String
  facultyPref String
  user        Dating_Options @relation(fields: [userId], references: [userId])

  @@id([userId, facultyPref])
}

model Card_Queue {
  userId      String       @unique
  frontUserId String
  backUserId  String
  frontUser   User_Profile @relation("Front User", fields: [frontUserId], references: [userId])
  backUser    User_Profile @relation("Back User", fields: [backUserId], references: [userId])
}

model User_Rating {
  userId        String
  anotherUserId String
  score         Int
  scoreGiver    User_Profile @relation("Giver", fields: [userId], references: [userId])
  scoreReceiver User_Profile @relation("Receiver", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Heart_History {
  userId        String
  anotherUserId String
  heartedAt     DateTime     @default(now())
  isSkipped     Boolean
  heartGiver    User_Profile @relation("HGiver", fields: [userId], references: [userId])
  heartReceiver User_Profile @relation("HReceiver", fields: [anotherUserId], references: [userId])

  @@id([userId, anotherUserId])
}

model Interest {
  interestId   Int             @id @default(autoincrement())
  interestName String
  users        User_Interest[]
  polls        Poll_Interest[]
}

model User_Interest {
  user       User_Profile @relation(fields: [userId], references: [userId])
  userId     String
  interest   Interest     @relation(fields: [interestId], references: [interestId])
  interestId Int

  @@id([userId, interestId])
}

model Dating_Enroll {
  userId              String       @unique
  hasCompleteTutorial Boolean
  hasCompleteSetting  Boolean
  userDating          User_Profile @relation(fields: [userId], references: [userId])
}

model Activity_Poll {
  pollId         String           @id @default(cuid())
  userId         String
  pollName       String
  pollPlace      String
  pollAppointAt  DateTime
  pollText       String
  participantMin Int
  participantMax Int
  isOpen         Boolean
  pollcreated    DateTime         @default(now())
  // roomId         String
  pollCreator    User_Profile     @relation(fields: [userId], references: [userId])
  participants   Poll_Applicant[]
  interests      Poll_Interest[]
}

model Poll_Applicant {
  user         User_Profile  @relation(fields: [userId], references: [userId])
  userId       String
  poll         Activity_Poll @relation(fields: [pollId], references: [pollId])
  pollId       String
  isAccepted   Boolean
  registerTime DateTime

  @@id([userId, pollId])
}

model Poll_Interest {
  pollId             String
  activityInterestId Int
  pollInterest       Activity_Poll @relation(fields: [pollId], references: [pollId])
  interest           Interest      @relation(fields: [activityInterestId], references: [interestId])

  @@id([pollId, activityInterestId])
}

//Community
model Community {
  communityId      String                @id @default(cuid())
  communityName    String
  communityOwnerId String
  communityDesc    String
  communityPrivacy Boolean
  communityPhoto   Bytes?
  member           Community_User[]
  blacklist        Community_Blacklist[]
  admin            Community_Role[]
  tags             Community_Tag[]
  posts            Community_Post[]
  files            Community_File[]
  accessTo         Community_Access[]
}

model Community_User {
  user        User_Profile @relation(fields: [userId], references: [userId])
  userId      String
  community   Community    @relation(fields: [communityId], references: [communityId])
  communityId String
  joined      DateTime

  @@id([userId, communityId])
}

model Community_Blacklist {
  user        User_Profile @relation(fields: [userId], references: [userId])
  userId      String
  community   Community    @relation(fields: [communityId], references: [communityId])
  communityId String
  since       DateTime

  @@id([userId, communityId])
}

model Community_Role {
  user        User_Profile @relation(fields: [userId], references: [userId])
  userId      String
  community   Community    @relation(fields: [communityId], references: [communityId])
  communityId String
  role        Role         @relation(fields: [roleId], references: [userId])
  roleId      String

  @@id([userId, communityId])
}

model Community_Tag {
  community   Community @relation(fields: [communityId], references: [communityId])
  communityId String
  tag         Tag       @relation(fields: [tagId], references: [tagId])
  tagId       Int

  @@id([communityId, tagId])
}

model Tag {
  tagId        Int             @id @default(autoincrement())
  tagName      String
  tagDesc      String
  communityTag Community_Tag[]
}

model Community_Post {
  post        Student_Post @relation(fields: [postId], references: [postId])
  postId      String       @unique
  community   Community    @relation(fields: [communityId], references: [communityId])
  communityId String
  isPinned    Boolean      @default(false)
}

model Community_File {
  file        File_Info @relation(fields: [fileId], references: [fileId])
  fileId      String    @unique
  community   Community @relation(fields: [communityId], references: [communityId])
  communityId String
}

//Airdrop Module
model File_Info {
  fileId      String           @id @default(cuid())
  fileName    String
  fileSender  String
  sendType    String
  fileDesc    String
  fileExpired DateTime
  users       User_Show_File[]
  community   Community_File?
  comments    File_Comment[]
  folders     File_In_Folder[]
}

model User_Show_File {
  user   User_Profile @relation(fields: [userId], references: [userId])
  userId String
  file   File_Info    @relation(fields: [fileId], references: [fileId])
  fileId String

  @@id([userId, fileId])
}

model File_Comment {
  commentId   String       @id @default(cuid())
  fileId      String
  userId      String
  commentText String
  commentedAt DateTime     @default(now())
  commentOn   File_Info    @relation(fields: [fileId], references: [fileId])
  commentor   User_Profile @relation(fields: [userId], references: [userId])
}

model Folder {
  folderId   String       @id @default(cuid())
  folderName String
  subFolder  Sub_Folder[]
}

model Sub_Folder {
  sFolderId    String           @id @default(cuid())
  sFolderName  String
  folderId     String
  parentFolder Folder           @relation(fields: [folderId], references: [folderId])
  files        File_In_Folder[]
}

model File_In_Folder {
  file      File_Info  @relation(fields: [fileId], references: [fileId])
  fileId    String
  folder    Sub_Folder @relation(fields: [sFolderId], references: [sFolderId])
  sFolderId String

  @@id([fileId, sFolderId])
}

model File_Access {
  accessId   String             @id @default(cuid())
  fileId     String
  accessType String
  everyone   Everyone_Access[]
  community  Community_Access[]
  major      Major_Access[]
  direct     Direct_Access[]
}

model Everyone_Access {
  eaId           String      @id @default(cuid())
  accessId       String
  eaFileAccessId File_Access @relation(fields: [accessId], references: [accessId])
}

model Community_Access {
  caId          String      @id @default(cuid())
  accessId      String
  communityId   String
  cFileAccessId File_Access @relation(fields: [accessId], references: [accessId])
  haveAccess    Community   @relation(fields: [communityId], references: [communityId])
}

model Major_Access {
  maId          String      @id @default(cuid())
  accessId      String
  majorId       Int
  mFileAccessId File_Access @relation(fields: [accessId], references: [accessId])
  haveAccess    Major       @relation(fields: [majorId], references: [majorId])
}

model Direct_Access {
  daId          String       @id @default(cuid())
  accessId      String
  userId        String
  dFileAccessId File_Access  @relation(fields: [accessId], references: [accessId])
  haveAccess    User_Profile @relation(fields: [userId], references: [userId])
}

//Backend Module
model User_Back {
  userId        String
  token         String
  loginSession  Login_Info[]
  logoutSession Logout_Info[]

  @@id([userId, token])
}

model Login_Info {
  loginId String        @id @default(cuid())
  userId  String
  token   String
  login   User_Back     @relation(fields: [userId, token], references: [userId, token])
  detail  Login_Detail?
}

model Login_Detail {
  loginId      String     @id
  loginDate    DateTime   @default(now())
  tokenExpired DateTime
  deviceInfo   String
  ip           String
  detailOf     Login_Info @relation(fields: [loginId], references: [loginId])
}

model Logout_Info {
  logoutId String         @id @default(cuid())
  userId   String
  token    String
  logout   User_Back      @relation(fields: [userId, token], references: [userId, token])
  detail   Logout_Detail?
}

model Logout_Detail {
  logoutId   String      @id
  logoutDate DateTime    @default(now())
  deviceInfo String
  ip         String
  detailOf   Logout_Info @relation(fields: [logoutId], references: [logoutId])
}

model Ban_Status {
  banId    String       @id @default(cuid())
  userId   String
  reason   String
  instance Int
  banFrom  DateTime     @default(now())
  banTo    DateTime
  user     User_Profile @relation(fields: [userId], references: [userId])
}

model wordReport {
  wordReportId Int               @id @default(autoincrement())
  word         String
  userId       String
  reporter     User_Profile      @relation(fields: [userId], references: [userId])
  detail       wordReportDetail?
  reportedWord Filtered_Word     @relation(fields: [wordReportId], references: [wordReportId])
}

model wordReportDetail {
  wordReportDetailId Int        @id
  roomId             String
  reason             String
  reportedAt         DateTime   @default(now())
  detailOf           wordReport @relation(fields: [wordReportDetailId], references: [wordReportId])
  reportFrom         Chat_Room  @relation(fields: [roomId], references: [roomId])
}

model Filtered_Word {
  wordReportId Int          @id
  word         String
  wordReport   wordReport[]
}

//ShortNotes Module
model Sn_Head {
  snId       String          @id @default(cuid())
  courseId   String
  created    DateTime        @default(now())
  userId     String
  isPublic   Boolean
  snName     String
  snDesc     String
  snLink     String
  votes      Int             @default(0)
  course     Course          @relation(fields: [courseId], references: [courseId])
  owner      User_Profile    @relation(fields: [userId], references: [userId])
  voteDetail Sn_Votedetail[]
  comments   Sn_Comment[]
  userFav    Sn_Fav[]
  userRecent Sn_Recent[]
  userAccess Sn_Access[]
  inTheseLib Sn_In_Library[]
}

model Sn_Votedetail {
  voteId   Int          @id @default(autoincrement())
  snId     String
  userId   String
  voteType Vote_Type
  votedBy  User_Profile @relation(fields: [userId], references: [userId])
  voteTo   Sn_Head      @relation(fields: [snId], references: [snId])

  @@unique([snId, userId])
}

enum Vote_Type {
  UPVOTE
  DOWNVOTE
}

model Sn_Comment {
  commentId   String       @id @default(cuid())
  snId        String
  userId      String
  comment     String
  commentedAt DateTime     @default(now())
  commentOn   Sn_Head      @relation(fields: [snId], references: [snId])
  commentor   User_Profile @relation(fields: [userId], references: [userId])
}

model Sn_Fav {
  favId     Int          @id @default(autoincrement())
  shortNote Sn_Head      @relation(fields: [snId], references: [snId])
  snId      String
  favBy     User_Profile @relation(fields: [userId], references: [userId])
  userId    String
}

model Sn_Recent {
  recentId     Int          @id @default(autoincrement())
  snId         String
  userId       String
  viewedAt     DateTime
  shortNote    Sn_Head      @relation(fields: [snId], references: [snId])
  recentViewBy User_Profile @relation(fields: [userId], references: [userId])
}

model Sn_Access {
  accessId  Int          @id @default(autoincrement())
  snId      String
  userId    String
  shortNote Sn_Head      @relation(fields: [snId], references: [snId])
  accessBy  User_Profile @relation(fields: [userId], references: [userId])
}

model Sn_Library {
  libId      Int             @id @default(autoincrement())
  libName    String
  userId     String
  shortNotes Sn_In_Library[]

  @@unique([libName, userId])
}

model Sn_In_Library {
  inLibId Int        @id @default(autoincrement())
  libId   Int
  snId    String
  lib     Sn_Library @relation(fields: [libId], references: [libId])
  sn      Sn_Head    @relation(fields: [snId], references: [snId])
}

//Transaction Module
model Transaction {
  transId         String               @id @default(cuid())
  userId          String
  payMethodId     Int
  subTotalPrice   Float
  pointUse        Int
  totalPrice      Float
  payTypeId       Int
  payer           User_Profile         @relation(fields: [userId], references: [userId])
  detail          Transaction_Detail?
  type            Transaction_Paytype?
  pointAccumulate Kmutt_Point_History?
  moneyChat       Chat_Transaction?
  moneyShop       Shop_Order?
}

model Transaction_Detail {
  transId      String            @id
  transDesc    String
  transCreated DateTime          @default(now())
  transStatus  String
  isShip       Boolean
  errKey       Int               @unique @default(autoincrement())
  errId        Int               @default(0)
  detailOf     Transaction       @relation(fields: [transId], references: [transId])
  haveError    Transaction_Error @relation(fields: [errKey], references: [errKey])
}

model Transaction_Error {
  errKey  Int                 @id @default(autoincrement())
  errId   Int                 @unique
  errDesc String
  error   Transaction_Detail?
}

model Transaction_Paymethod {
  payMethodId Int          @id
  tokenId     String       @unique
  ccMethod    Credit_Card?
  ebMethod    E_Banking?
  qrMethod    QR?
}

model Credit_Card {
  tokenId     String                @id @default(cuid())
  ccId        String
  holderName  String
  country     String
  bank        String
  cvc         String
  last4       String
  cardExpired DateTime
  payMethod   Transaction_Paymethod @relation(fields: [tokenId], references: [tokenId])
}

model E_Banking {
  tokenId    String                @id @default(cuid())
  bkId       String
  holderName String
  holderType String
  bank       String
  country    String
  currency   String
  payMethod  Transaction_Paymethod @relation(fields: [tokenId], references: [tokenId])
}

model QR {
  tokenId    String                @id @default(cuid())
  qrSourceId String
  qr         String
  expired    DateTime
  payMethod  Transaction_Paymethod @relation(fields: [tokenId], references: [tokenId])
}

model Transaction_Paytype {
  transId     String       @id
  payTypeId   Int
  typeOfTrans Payment_Type
  transType   Transaction  @relation(fields: [transId], references: [transId])
}

enum Payment_Type {
  SHOP
  MESSAGE
}

model Kmutt_Point {
  kpId            String                @id @default(cuid())
  userId          String                @unique
  userPoint       User_Profile          @relation(fields: [userId], references: [userId])
  pointAccumulate Kmutt_Point_History[]
}

model Kmutt_Point_History {
  transId            String      @id
  kpId               String
  // userId String
  pointsReceived     Int         @default(0)
  pointsSpent        Int         @default(0)
  pointTransactionAt DateTime    @default(now())
  pointHistoryFrom   Transaction @relation(fields: [transId], references: [transId])
  pointHistoryOf     Kmutt_Point @relation(fields: [kpId], references: [kpId])
}

//Shop Module
model Shop_Order {
  orderId           String               @id @default(cuid())
  userId            String
  transId           String               @unique
  couponCode        String               @unique
  totalPrice        Float
  totalDeliveryFees Float
  shipping          String
  orderPlaced       DateTime             @default(now())
  orderStatus       String
  transaction       Transaction          @relation(fields: [transId], references: [transId])
  useCoupon         User_Coupon          @relation(fields: [couponCode], references: [couponCode])
  products          Shop_Order_Product[]
}

model Shop_Coupon {
  couponCode   String        @id
  couponDesc   String
  discount     Float
  validFrom    DateTime
  validTill    DateTime
  minimumSpend Float
  productId    Int
  quota        Int
  userCoupon   User_Coupon[]
}

model User_Coupon {
  userId     String
  couponCode String       @unique
  user       User_Profile @relation(fields: [userId], references: [userId])
  coupon     Shop_Coupon  @relation(fields: [couponCode], references: [couponCode])
  useCoupon  Shop_Order?

  @@id([userId, couponCode])
}

model Shop_Product {
  productId    Int                   @id @default(autoincrement())
  categoryId   Int
  contactId    Int
  productName  String
  productDesc  String
  productColor String
  productSize  String
  productPrice Float
  productStock Int
  brandName    String
  deliveryFees Float
  views        BigInt
  images       Shop_Product_Images[]
  inCategory   Shop_Categories       @relation(fields: [categoryId], references: [categoryId])
  contactTo    Shop_Contact          @relation(fields: [contactId], references: [contactId])
  orders       Shop_Order_Product[]
  carts        Shop_Cart[]
  userReview   Shop_Product_Review[]
}

model Shop_Categories {
  categoryId   Int            @id
  categoryName String
  image        String
  products     Shop_Product[]
}

model Shop_Contact {
  contactId     Int            @id
  contactPerson String
  phoneNo       String
  address       String
  lineId        String
  products      Shop_Product[]
}

model Shop_Product_Images {
  piId      Int          @id @default(autoincrement())
  productId Int
  image     String
  imageOf   Shop_Product @relation(fields: [productId], references: [productId])
}

model Shop_Order_Product {
  orderId   String
  order     Shop_Order   @relation(fields: [orderId], references: [orderId])
  productId Int
  product   Shop_Product @relation(fields: [productId], references: [productId])
  quantity  Int

  @@id([orderId, productId])
}

model Shop_Cart {
  userId    String
  user      User_Profile @relation(fields: [userId], references: [userId])
  productId Int
  product   Shop_Product @relation(fields: [productId], references: [productId])
  quantity  Int

  @@id([userId, productId])
}

model Shop_Product_Review {
  reviewId     Int          @id
  userId       String
  user         User_Profile @relation(fields: [userId], references: [userId])
  productId    Int
  product      Shop_Product @relation(fields: [productId], references: [productId])
  reviewName   String
  reviewDesc   String
  reviewRating Int
  reviewAt     DateTime     @default(now())
  image        String
}

//Restaurant Module
model Restaurant {
  resId       String                        @id @default(cuid())
  resName     String
  lastupdated DateTime                      @default(now())
  likes       Int
  isSeen      Boolean
  detail      Restaurant_Detail?
  images      Restaurant_Image[]
  openAt      Restaurant_Open[]
  closeAt     Restaurant_Close[]
  userLike    Restaurant_Like_By_User[]
  userFav     Restaurant_Favorite_By_User[]
  userSeen    Restaurant_Seen_By_User[]
  reviews     SReview_Restaurant_Review[]
}

model Restaurant_Detail {
  resId     String     @id
  phoneNo   String
  website   String
  location  String
  vicinity  String
  latitude  Float
  longitude Float
  detailOf  Restaurant @relation(fields: [resId], references: [resId])
}

model Restaurant_Image {
  imageId Int        @id @default(autoincrement())
  resId   String
  image   String
  imageOf Restaurant @relation(fields: [resId], references: [resId])
}

model Restaurant_Open {
  openId Int        @id @default(autoincrement())
  resId  String
  open   DateTime
  day    Int
  openOf Restaurant @relation(fields: [resId], references: [resId])
}

model Restaurant_Close {
  closeId Int        @id @default(autoincrement())
  resId   String
  close   DateTime
  day     Int
  openOf  Restaurant @relation(fields: [resId], references: [resId])
}

model Restaurant_Like_By_User {
  userId     String
  user       User_Profile @relation(fields: [userId], references: [userId])
  resId      String
  restaurant Restaurant   @relation(fields: [resId], references: [resId])

  @@id([userId, resId])
}

model Restaurant_Favorite_By_User {
  userId     String
  user       User_Profile @relation(fields: [userId], references: [userId])
  resId      String
  restaurant Restaurant   @relation(fields: [resId], references: [resId])

  @@id([userId, resId])
}

model Restaurant_Seen_By_User {
  userId     String
  user       User_Profile @relation(fields: [userId], references: [userId])
  resId      String
  restaurant Restaurant   @relation(fields: [resId], references: [resId])
  seenAt     DateTime     @default(now())

  @@id([userId, resId])
}

//ShopReview Module
model SReview_Shop {
  shopId         String                @id @default(cuid())
  shopName       String
  shopType       String
  open           String
  close          String
  phoneNo        String
  address        String
  latitude       String
  longitude      String
  aveRating      Float
  reviewReceived Int
  images         SReview_Shop_Image[]
  reviews        SReview_Shop_Review[]
}

model SReview_Shop_Image {
  imageId Int          @id @default(autoincrement())
  shopId  String
  image   String
  imageOf SReview_Shop @relation(fields: [shopId], references: [shopId])
}

model SReview_Review {
  reviewId         String                     @id @default(cuid())
  shopReview       SReview_Shop_Review?
  restaurantReview SReview_Restaurant_Review?
  images           SReview_Review_Image[]
  comments         SReview_Comment[]
}

model SReview_Shop_Review {
  reviewId     String                     @id
  shopId       String
  userId       String
  reviewedAt   DateTime                   @default(now())
  text         String
  rating       Int
  likeReceived Int
  review       SReview_Review             @relation(fields: [reviewId], references: [reviewId])
  reviewOf     SReview_Shop               @relation(fields: [shopId], references: [shopId])
  reviewBy     User_Profile               @relation(fields: [userId], references: [userId])
  userLike     SReview_Shop_Review_Like[]
}

model SReview_Restaurant_Review {
  reviewId     String                           @id
  resId        String
  userId       String
  reviewedAt   DateTime                         @default(now())
  text         String
  rating       Int
  likeReceived Int
  review       SReview_Review                   @relation(fields: [reviewId], references: [reviewId])
  reviewOf     Restaurant                       @relation(fields: [resId], references: [resId])
  reviewBy     User_Profile                     @relation(fields: [userId], references: [userId])
  userLike     SReview_Restaurant_Review_Like[]
}

model SReview_Review_Image {
  imageId  Int            @id @default(autoincrement())
  reviewId String
  image    String
  imageOf  SReview_Review @relation(fields: [reviewId], references: [reviewId])
}

model SReview_Comment {
  commentId    Int                    @id @default(autoincrement())
  reviewId     String
  userId       String
  text         String
  commentedAt  DateTime
  likeReceived Int
  commentOf    SReview_Review         @relation(fields: [reviewId], references: [reviewId])
  userLike     SReview_Comment_Like[]
}

model SReview_Shop_Review_Like {
  reviewId   String
  shopReview SReview_Shop_Review @relation(fields: [reviewId], references: [reviewId])
  userId     String
  user       User_Profile        @relation(fields: [userId], references: [userId])

  @@id([reviewId, userId])
}

model SReview_Restaurant_Review_Like {
  reviewId         String
  restaurantReview SReview_Restaurant_Review @relation(fields: [reviewId], references: [reviewId])
  userId           String
  user             User_Profile              @relation(fields: [userId], references: [userId])

  @@id([reviewId, userId])
}

model SReview_Comment_Like {
  commentId Int
  comment   SReview_Comment @relation(fields: [commentId], references: [commentId])
  userId    String
  user      User_Profile    @relation(fields: [userId], references: [userId])

  @@id([commentId, userId])
}

model SReview_Suggestion {
  suggestId  Int          @id @default(autoincrement())
  userId     String
  suggestion String
  user       User_Profile @relation(fields: [userId], references: [userId])
}
